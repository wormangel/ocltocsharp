
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 23 11:12:54 GMT-03:00 2010
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 23 11:12:54 GMT-03:00 2010
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\004\004\000\002\004\004" +
    "\000\002\005\005\000\002\010\010\000\002\010\012\000" +
    "\002\014\003\000\002\011\005\000\002\011\003\000\002" +
    "\012\003\000\002\013\005\000\002\013\003\000\002\016" +
    "\005\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\007\003\000\002\024\003\000\002\024\005\000" +
    "\002\025\003\000\002\025\005\000\002\027\003\000\002" +
    "\027\005\000\002\030\003\000\002\030\005\000\002\032" +
    "\004\000\002\032\003\000\002\036\003\000\002\036\005" +
    "\000\002\036\005\000\002\037\005\000\002\037\003\000" +
    "\002\037\003\000\002\040\003\000\002\041\003\000\002" +
    "\051\004\000\002\050\005\000\002\043\011\000\002\017" +
    "\003\000\002\017\003\000\002\020\006\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\023\003\000\002" +
    "\023\005\000\002\015\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\041\006\000\002\041\005\000\002\044\003\000" +
    "\002\044\005\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\045\003\000\002\045\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\031\003\000\002\031\003\000\002" +
    "\046\003\000\002\046\003\000\002\034\003\000\002\034" +
    "\003\000\002\047\003\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\004\024\007\001\002\000\004\002\127\001" +
    "\002\000\006\002\uffff\024\007\001\002\000\010\004\035" +
    "\005\036\006\037\001\002\000\004\056\010\001\002\000" +
    "\014\004\ufff6\005\ufff6\006\ufff6\033\014\034\013\001\002" +
    "\000\010\004\ufffc\005\ufffc\006\ufffc\001\002\000\010\004" +
    "\ufffd\005\ufffd\006\ufffd\001\002\000\004\056\016\001\002" +
    "\000\004\056\015\001\002\000\010\004\ufff7\005\ufff7\006" +
    "\ufff7\001\002\000\004\025\ufff5\001\002\000\004\025\020" +
    "\001\002\000\004\056\021\001\002\000\004\033\033\001" +
    "\002\000\006\026\ufff3\035\ufff3\001\002\000\006\026\024" +
    "\035\025\001\002\000\012\004\ufffa\005\ufffa\006\ufffa\033" +
    "\027\001\002\000\004\056\021\001\002\000\006\026\ufff4" +
    "\035\ufff4\001\002\000\004\056\030\001\002\000\014\004" +
    "\uffcd\005\uffcd\006\uffcd\026\uffcd\035\uffcd\001\002\000\010" +
    "\004\ufff8\005\ufff8\006\ufff8\001\002\000\010\004\ufff9\005" +
    "\ufff9\006\ufff9\001\002\000\004\056\030\001\002\000\006" +
    "\026\ufff2\035\ufff2\001\002\000\004\033\ufff1\001\002\000" +
    "\004\033\ufff0\001\002\000\004\033\uffef\001\002\000\004" +
    "\033\042\001\002\000\006\002\ufffe\024\ufffe\001\002\000" +
    "\024\012\051\025\052\053\043\057\055\061\050\062\061" +
    "\067\064\071\066\076\046\001\002\000\020\012\uffb1\025" +
    "\uffb1\057\uffb1\061\uffb1\062\uffb1\067\uffb1\071\uffb1\001\002" +
    "\000\044\002\uffe3\013\uffe3\014\uffe3\024\uffe3\026\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\043\uffe3\044\121\046\122\052\uffe3" +
    "\053\uffe3\073\uffe3\074\uffe3\075\uffe3\077\uffe3\001\002\000" +
    "\016\002\uffee\013\uffee\014\uffee\024\uffee\026\uffee\077\uffee" +
    "\001\002\000\020\012\uffb2\025\uffb2\057\uffb2\061\uffb2\062" +
    "\uffb2\067\uffb2\071\uffb2\001\002\000\044\002\uffde\013\uffde" +
    "\014\uffde\024\uffde\026\uffde\040\uffde\041\uffde\042\uffde\043" +
    "\uffde\044\uffde\046\uffde\052\uffde\053\uffde\073\uffde\074\uffde" +
    "\075\uffde\077\uffde\001\002\000\044\002\uffc9\013\uffc9\014" +
    "\uffc9\024\uffc9\026\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9" +
    "\044\uffc9\046\uffc9\052\uffc9\053\uffc9\073\uffc9\074\uffc9\075" +
    "\uffc9\077\uffc9\001\002\000\024\012\051\025\052\053\043" +
    "\057\055\061\050\062\061\067\064\071\066\076\046\001" +
    "\002\000\024\012\051\025\052\053\043\057\055\061\050" +
    "\062\061\067\064\071\066\076\046\001\002\000\040\002" +
    "\uffe4\013\uffe4\014\uffe4\024\uffe4\026\uffe4\040\uffe4\041\uffe4" +
    "\042\uffe4\043\uffe4\052\uffe4\053\uffe4\073\uffe4\074\uffe4\075" +
    "\uffe4\077\uffe4\001\002\000\020\012\051\025\052\057\055" +
    "\061\050\062\061\067\064\071\066\001\002\000\044\002" +
    "\uffcc\013\uffcc\014\uffcc\024\uffcc\026\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\046\uffcc\052\uffcc\053\uffcc\073" +
    "\uffcc\074\uffcc\075\uffcc\077\uffcc\001\002\000\040\002\uffe7" +
    "\013\uffe7\014\uffe7\024\uffe7\026\uffe7\040\uffe7\041\uffe7\042" +
    "\uffe7\043\uffe7\052\uffe7\053\uffe7\073\uffe7\074\uffe7\075\uffe7" +
    "\077\uffe7\001\002\000\006\002\ufffb\024\ufffb\001\002\000" +
    "\024\002\uffed\013\uffed\014\uffed\024\uffed\026\uffed\073\101" +
    "\074\104\075\103\077\uffed\001\002\000\044\002\uffc8\013" +
    "\uffc8\014\uffc8\024\uffc8\026\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\046\uffc8\052\uffc8\053\uffc8\073\uffc8\074" +
    "\uffc8\075\uffc8\077\uffc8\001\002\000\034\002\uffeb\013\uffeb" +
    "\014\uffeb\024\uffeb\026\uffeb\040\074\041\075\042\073\043" +
    "\076\073\uffeb\074\uffeb\075\uffeb\077\uffeb\001\002\000\040" +
    "\002\uffe9\013\uffe9\014\uffe9\024\uffe9\026\uffe9\040\uffe9\041" +
    "\uffe9\042\uffe9\043\uffe9\052\067\053\071\073\uffe9\074\uffe9" +
    "\075\uffe9\077\uffe9\001\002\000\044\002\uffca\013\uffca\014" +
    "\uffca\024\uffca\026\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\046\uffca\052\uffca\053\uffca\073\uffca\074\uffca\075" +
    "\uffca\077\uffca\001\002\000\044\002\uffdf\013\uffdf\014\uffdf" +
    "\024\uffdf\026\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044" +
    "\uffdf\046\uffdf\052\uffdf\053\uffdf\073\uffdf\074\uffdf\075\uffdf" +
    "\077\uffdf\001\002\000\044\002\uffcb\013\uffcb\014\uffcb\024" +
    "\uffcb\026\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb" +
    "\046\uffcb\052\uffcb\053\uffcb\073\uffcb\074\uffcb\075\uffcb\077" +
    "\uffcb\001\002\000\024\012\uffb6\025\uffb6\053\uffb6\057\uffb6" +
    "\061\uffb6\062\uffb6\067\uffb6\071\uffb6\076\uffb6\001\002\000" +
    "\024\012\051\025\052\053\043\057\055\061\050\062\061" +
    "\067\064\071\066\076\046\001\002\000\024\012\uffb5\025" +
    "\uffb5\053\uffb5\057\uffb5\061\uffb5\062\uffb5\067\uffb5\071\uffb5" +
    "\076\uffb5\001\002\000\034\002\uffe8\013\uffe8\014\uffe8\024" +
    "\uffe8\026\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\073\uffe8" +
    "\074\uffe8\075\uffe8\077\uffe8\001\002\000\024\012\uffb7\025" +
    "\uffb7\053\uffb7\057\uffb7\061\uffb7\062\uffb7\067\uffb7\071\uffb7" +
    "\076\uffb7\001\002\000\024\012\uffb8\025\uffb8\053\uffb8\057" +
    "\uffb8\061\uffb8\062\uffb8\067\uffb8\071\uffb8\076\uffb8\001\002" +
    "\000\024\012\uffba\025\uffba\053\uffba\057\uffba\061\uffba\062" +
    "\uffba\067\uffba\071\uffba\076\uffba\001\002\000\024\012\uffb9" +
    "\025\uffb9\053\uffb9\057\uffb9\061\uffb9\062\uffb9\067\uffb9\071" +
    "\uffb9\076\uffb9\001\002\000\024\012\051\025\052\053\043" +
    "\057\055\061\050\062\061\067\064\071\066\076\046\001" +
    "\002\000\024\002\uffea\013\uffea\014\uffea\024\uffea\026\uffea" +
    "\073\uffea\074\uffea\075\uffea\077\uffea\001\002\000\024\012" +
    "\uffc3\025\uffc3\053\uffc3\057\uffc3\061\uffc3\062\uffc3\067\uffc3" +
    "\071\uffc3\076\uffc3\001\002\000\024\012\051\025\052\053" +
    "\043\057\055\061\050\062\061\067\064\071\066\076\046" +
    "\001\002\000\024\012\uffc1\025\uffc1\053\uffc1\057\uffc1\061" +
    "\uffc1\062\uffc1\067\uffc1\071\uffc1\076\uffc1\001\002\000\024" +
    "\012\uffc2\025\uffc2\053\uffc2\057\uffc2\061\uffc2\062\uffc2\067" +
    "\uffc2\071\uffc2\076\uffc2\001\002\000\016\002\uffec\013\uffec" +
    "\014\uffec\024\uffec\026\uffec\077\uffec\001\002\000\024\012" +
    "\051\025\052\053\043\057\055\061\050\062\061\067\064" +
    "\071\066\076\046\001\002\000\040\002\uffe6\013\uffe6\014" +
    "\uffe6\024\uffe6\026\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6" +
    "\052\uffe6\053\uffe6\073\uffe6\074\uffe6\075\uffe6\077\uffe6\001" +
    "\002\000\040\002\uffe5\013\uffe5\014\uffe5\024\uffe5\026\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\043\uffe5\052\uffe5\053\uffe5\073" +
    "\uffe5\074\uffe5\075\uffe5\077\uffe5\001\002\000\004\026\112" +
    "\001\002\000\044\002\uffe0\013\uffe0\014\uffe0\024\uffe0\026" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\046\uffe0" +
    "\052\uffe0\053\uffe0\073\uffe0\074\uffe0\075\uffe0\077\uffe0\001" +
    "\002\000\004\013\114\001\002\000\024\012\051\025\052" +
    "\053\043\057\055\061\050\062\061\067\064\071\066\076" +
    "\046\001\002\000\004\014\116\001\002\000\024\012\051" +
    "\025\052\053\043\057\055\061\050\062\061\067\064\071" +
    "\066\076\046\001\002\000\004\077\120\001\002\000\044" +
    "\002\uffd9\013\uffd9\014\uffd9\024\uffd9\026\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\046\uffd9\052\uffd9\053\uffd9" +
    "\073\uffd9\074\uffd9\075\uffd9\077\uffd9\001\002\000\004\056" +
    "\123\001\002\000\004\056\123\001\002\000\040\002\uffdd" +
    "\013\uffdd\014\uffdd\024\uffdd\026\uffdd\040\uffdd\041\uffdd\042" +
    "\uffdd\043\uffdd\052\uffdd\053\uffdd\073\uffdd\074\uffdd\075\uffdd" +
    "\077\uffdd\001\002\000\040\002\uffe1\013\uffe1\014\uffe1\024" +
    "\uffe1\026\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\052\uffe1" +
    "\053\uffe1\073\uffe1\074\uffe1\075\uffe1\077\uffe1\001\002\000" +
    "\040\002\uffe2\013\uffe2\014\uffe2\024\uffe2\026\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\052\uffe2\053\uffe2\073\uffe2\074" +
    "\uffe2\075\uffe2\077\uffe2\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\010\002\003\003\004\004\005\001\001\000" +
    "\002\001\001\000\010\002\125\003\004\004\005\001\001" +
    "\000\006\005\040\006\037\001\001\000\006\010\011\011" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\022\016\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\025" +
    "\001\001\000\002\001\001\000\006\014\031\015\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\007\056\024\044\025\057\027" +
    "\061\030\062\032\055\034\053\036\052\037\043\042\064" +
    "\043\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\007\112\024\044\025\057\027\061\030" +
    "\062\032\055\034\053\036\052\037\043\042\064\043\046" +
    "\001\001\000\030\007\110\024\044\025\057\027\061\030" +
    "\062\032\055\034\053\036\052\037\043\042\064\043\046" +
    "\001\001\000\002\001\001\000\012\036\107\037\043\042" +
    "\064\043\046\001\001\000\002\001\001\000\004\033\105" +
    "\001\001\000\002\001\001\000\004\026\101\001\001\000" +
    "\002\001\001\000\004\035\076\001\001\000\004\031\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\027\071\030\062\032\055" +
    "\034\053\036\052\037\043\042\064\043\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\025" +
    "\077\027\061\030\062\032\055\034\053\036\052\037\043" +
    "\042\064\043\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\024\104\025\057\027\061\030\062\032\055" +
    "\034\053\036\052\037\043\042\064\043\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\030\106\032\055\034\053\036\052\037\043\042\064\043" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\007" +
    "\114\024\044\025\057\027\061\030\062\032\055\034\053" +
    "\036\052\037\043\042\064\043\046\001\001\000\002\001" +
    "\001\000\030\007\116\024\044\025\057\027\061\030\062" +
    "\032\055\034\053\036\052\037\043\042\064\043\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\124" +
    "\001\001\000\004\040\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PostfixOperator ::= SETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PostfixOperator",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PostfixOperator ::= PONTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PostfixOperator",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // UnaryOperator ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryOperator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // UnaryOperator ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryOperator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // MultiplyOperator ::= DIVIDIR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplyOperator",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MultiplyOperator ::= VEZES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplyOperator",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // AddOperator ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AddOperator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // AddOperator ::= MAIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AddOperator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RelationalOperator ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // RelationalOperator ::= MENORQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // RelationalOperator ::= MAIORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // RelationalOperator ::= MAIORQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EqualityOperator ::= DIFF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EqualityOperator",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EqualityOperator ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EqualityOperator",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CollectionKind ::= COLLECTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionKind",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CollectionKind ::= SEQUENCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionKind",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CollectionKind ::= BAG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionKind",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CollectionKind ::= SET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionKind",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LogicalOperator ::= XOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalOperator",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LogicalOperator ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalOperator",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LogicalOperator ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalOperator",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CollectionItems ::= OCLExpression VIRGULA CollectionItems 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionItems",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CollectionItems ::= OCLExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionItems",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LiteralCollection ::= CollectionKind LCHAVE RCHAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LiteralCollection",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LiteralCollection ::= CollectionKind LCHAVE CollectionItems RCHAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LiteralCollection",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OCLLiteral ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLLiteral",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OCLLiteral ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLLiteral",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OCLLiteral ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLLiteral",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OCLLiteral ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLLiteral",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OCLLiteral ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLLiteral",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TypeIdentifier ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeIdentifier",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PathName ::= ID PONTO PathName 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PathName",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PathName ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PathName",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SimpleTypeSpecifier ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeSpecifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SimpleTypeSpecifier ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeSpecifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SimpleTypeSpecifier ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeSpecifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SimpleTypeSpecifier ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeSpecifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SimpleTypeSpecifier ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeSpecifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SimpleTypeSpecifier ::= PathName 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeSpecifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CollectionType ::= CollectionKind LPAREN SimpleTypeSpecifier RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionType",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TypeSpecifier ::= SimpleTypeSpecifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TypeSpecifier ::= CollectionType 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IfExpression ::= IF OCLExpression THEN OCLExpression ELSE OCLExpression ENDIF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfExpression",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ImpliesExpression ::= OCLExpression IMPLIES OCLExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImpliesExpression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CollectionExpression ::= PathName SETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionExpression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LiteralCollection ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LiteralCollection",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PropertyCall ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCall",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PrimaryExpression ::= IfExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PrimaryExpression ::= OCLLiteral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PrimaryExpression ::= LPAREN OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PostFixExpression ::= PrimaryExpression PONTO PropertyCall 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PostFixExpression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PostFixExpression ::= PrimaryExpression SETA PropertyCall 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PostFixExpression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PostFixExpression ::= PrimaryExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PostFixExpression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // UnaryExpression ::= PostFixExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // UnaryExpression ::= UnaryOperator PostFixExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MultiplicativeExpression ::= UnaryExpression MultOperator MultiplicativeExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MultiplicativeExpression ::= UnaryExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AdditiveExpression ::= MultiplicativeExpression AddOperator AdditiveExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AdditiveExpression ::= MultiplicativeExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RelationalExpression ::= AdditiveExpression RelationalOperator RelationalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // RelationalExpression ::= AdditiveExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LogicalExpression ::= RelationalExpression LogicalOperator LogicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LogicalExpression ::= RelationalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OCLExpression ::= LogicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLExpression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Stereotype ::= INV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stereotype",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Stereotype ::= POS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stereotype",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Stereotype ::= PRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stereotype",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FormalParameter ::= ID DOISPONTOS TypeIdentifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameter",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FormalParameters ::= FormalParameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FormalParameters ::= FormalParameters VIRGULA FormalParameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OperationName ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperationName",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ClassifierContext ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassifierContext",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ClassifierContext ::= ID DOISPONTOS ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassifierContext",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ReturnType ::= TypeIdentifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnType",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OperationContext ::= ID QUATROPONTOS OperationName LPAREN FormalParameters RPAREN DOISPONTOS ReturnType 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperationContext",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OperationContext ::= ID QUATROPONTOS OperationName LPAREN FormalParameters RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperationContext",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ContextBody ::= Stereotype DOISPONTOS OCLExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContextBody",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ContextDeclaration ::= CONTEXT ClassifierContext 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContextDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ContextDeclaration ::= CONTEXT OperationContext 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContextDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Constraint ::= ContextDeclaration ContextBody 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constraint",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // OCLConstraints ::= Constraint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLConstraints",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // OCLConstraints ::= Constraint OCLConstraints 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLConstraints",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= OCLConstraints EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

