import java_cup.runtime.*;

/* Terminais (tokens vindos do lexer) */
terminal            PRE, POS, INV, SELECT, EXISTS, FORALL, IF, THEN, ELSE, IMPLIES, INCLUDES, EXCLUDES, OCLISNEW, ATPRE, RESULT, SIZE, CONTEXT, LPAREN, RPAREN;
terminal			LCOLCH, RCOLCH, LCHAVE, RCHAVE, DOISPONTOS, QUATROPONTOS, VIRGULA, IGUAL, DIFF, MENORQ, MAIORQ, MENORIGUAL, MAIORIGUAL, SETA, PONTOPONTO;
terminal			PONTO, SHARP, PONTOVIRGULA, BARRA, MAIS, MENOS, VEZES, DIVIDIR;
terminal String		ID;
terminal 			STRING, BOOLEAN, NUMBER, SET, BAG, SEQUENCE, COLLECTION;
terminal Integer	INTEGER;
terminal 			VOID, AND, OR, XOR, NOT, ENDIF, INTTYPE, REALTYPE, PACKAGE, ENDPACKAGE;
terminal Double		REAL;
terminal Boolean	TRUE, FALSE;


/* Não terminais */
non terminal            OCLFile, OCLConstraints, Constraint, ContextDeclaration, ContextBody, Stereotype, OCLExpression, OperationContext, ClassifierContext;
non terminal			OperationName, FormalParameters,  ReturnType, FormalParameter, TypeSpecifier, CollectionType, CollectionKind,SimpleTypeSpecifier, PathName, OCLLiteral;
non terminal			BoolValue, Number;
//Expressions
non terminal 			PostFixExpression, LogicalExpression, NumberExpression, RelationalExpression, PropertyCall, PropertyCallExpression, AdditiveExpression, MultiplicativeExpression, UnaryExpression, PrimaryExpression, InvExpression, PreExpression, EqualityExpression;
//Operators
non terminal String		MultiplyOperator, PostfixOperator, RelationalOperator, UnaryOperator, MultOperator, AddOperator, LogicalOperator;
//Conditional Expressions
non terminal			ConditionalExpression, IfExpression, ImpliesExpression;
//Collections
non terminal			CollectionItems, CollectionExpression, LiteralCollection, CollectionOperations, SelectOperation, ExistsOperation, IncludingOperation, ExcludingOperation, ForAllOperation, SizeOperation, CollectionParameters;

precedence left IMPLIES;
precedence left XOR;
precedence left OR;
precedence left AND;
precedence left DIFF, IGUAL;
precedence left MENORIGUAL, MAIORIGUAL, MENORQ, MAIORQ;
precedence left IF, THEN, ELSE, ENDIF;
precedence left MAIS, MENOS;
precedence left VEZES, DIVIDIR;
precedence left PONTO, SETA;


/* Regras */
// Regra Inicial
start with OCLFile;
// Regras para constraints
OCLFile ::= PACKAGE ID OCLConstraints ENDPACKAGE
				| OCLConstraints;
OCLConstraints ::= Constraint OCLConstraints | Constraint;
Constraint ::= ContextDeclaration ContextBody;
ContextDeclaration ::= CONTEXT OperationContext 
				| CONTEXT ClassifierContext;
ContextBody ::= InvExpression
				| PreExpression;
InvExpression ::= INV DOISPONTOS OCLExpression
				| INV ID DOISPONTOS OCLExpression;
PreExpression ::= PRE DOISPONTOS OCLExpression
				| PRE ID DOISPONTOS OCLExpression
				| POS DOISPONTOS OCLExpression
				| POS ID DOISPONTOS OCLExpression
				| PRE DOISPONTOS OCLExpression POS DOISPONTOS OCLExpression
				| PRE ID DOISPONTOS OCLExpression POS ID DOISPONTOS OCLExpression;

OperationContext ::= ID QUATROPONTOS PropertyCall  
				| ID QUATROPONTOS PropertyCall DOISPONTOS TypeSpecifier ;
ClassifierContext ::= ID:i DOISPONTOS ID {:
					if (!XmiParser.isValidClass(i)){
						System.err.println("\n\nERRO DE COMPILACAO, NAO EXISTE CLASSE " + i + " DEFINIDA NO XMI");
						System.exit(0);
					}
				:} 
				| ID:i {: 
					if (!XmiParser.isValidClass(i)){
						System.err.println("\n\nERRO DE COMPILACAO, NAO EXISTE CLASSE " + i + " DEFINIDA NO XMI");
						System.exit(0);}
					:};

// Expressões 
OCLExpression ::= LogicalExpression;
LogicalExpression ::= RelationalExpression
				| RelationalExpression LogicalOperator LogicalExpression;
RelationalExpression  ::= AdditiveExpression
				| AdditiveExpression RelationalOperator RelationalExpression;
AdditiveExpression ::= MultiplicativeExpression
				| MultiplicativeExpression:e1 AddOperator:o AdditiveExpression:e2
				{:
				if(e1 instanceof Integer && e2 instanceof Integer){
						if(o.equals("+")){
							RESULT = new Integer( (int) ( ((Integer)e1).intValue() + ((Integer)e2).intValue() ));
							System.out.println("ALOK1");
						} else if (o.equals("-")){
							RESULT = new Integer( (int) ( ((Integer)e1).intValue() - ((Integer)e2).intValue() ));
							System.out.println("ALOK2");
						}
			   	} else if( (e1 instanceof Double && e2 instanceof Double) ||
				          (e1 instanceof Integer && e2 instanceof Double) ||
				          (e1 instanceof Double && e2 instanceof Integer) ) {
			   			if(o.equals("+")){
							RESULT = new Double( (double) ( ((Double)e1).doubleValue() + ((Double)e2).doubleValue() ));
							System.out.println("ALOK1");
						} else if (o.equals("-")){
							RESULT = new Double( (double) ( ((Double)e1).doubleValue() - ((Double)e2).doubleValue() ));
							System.out.println("ALOK2");
						}
			   	} else {
			   			System.err.println("\n\nERRO DE COMPILACAO AdditiveExpression");
			   			System.exit(0);
	   			}
				:};
MultiplicativeExpression ::= UnaryExpression
				| UnaryExpression:e1 MultOperator:o MultiplicativeExpression:e2
				{:
				if(e1 instanceof Integer && e2 instanceof Integer){
						if(o.equals("*")){
							RESULT = new Integer( (int) ( ((Integer)e1).intValue() * ((Integer)e2).intValue() ));
						} else if (o.equals("/")){
							RESULT = new Integer( (int) ( ((Integer)e1).intValue() / ((Integer)e2).intValue() ));
						}
			   	} else if( (e1 instanceof Double && e2 instanceof Double) ||
				          (e1 instanceof Integer && e2 instanceof Double) ||
				          (e1 instanceof Double && e2 instanceof Integer) ) {
			   			if(o.equals("*")){
							RESULT = new Double( (double) ( ((Double)e1).doubleValue() + ((Double)e2).doubleValue() ));
						} else if (o.equals("/")){
							RESULT = new Double( (double) ( ((Double)e1).doubleValue() - ((Double)e2).doubleValue() ));
						}
			   	} else {
			   			System.err.println("\n\nERRO DE COMPILACAO MultiplicativeExpression");
			   			System.exit(0);
	   			}
				:};
UnaryExpression ::= PrimaryExpression
				| UnaryOperator UnaryExpression
				| PrimaryExpression UnaryOperator UnaryExpression;
PrimaryExpression ::= LiteralCollection 
				| IfExpression
				| LPAREN OCLExpression RPAREN
				| CollectionExpression
				;

LiteralCollection ::= Number
				| BoolValue
				| STRING
				| PropertyCall
				| PropertyCall ATPRE;
IfExpression ::= IF LogicalExpression THEN  LogicalExpression  ELSE  LogicalExpression ENDIF;	

//Expressões em coleções				
CollectionExpression ::= CollectionOperations;
CollectionOperations ::= SelectOperation
				|ExistsOperation
				|IncludingOperation
				|ExcludingOperation
				|ForAllOperation
				|SizeOperation;
SelectOperation ::= SELECT LPAREN OCLExpression RPAREN
				| SELECT LPAREN CollectionParameters DOISPONTOS TypeSpecifier  BARRA OCLExpression RPAREN
				| SELECT LPAREN CollectionParameters BARRA OCLExpression RPAREN;
ExistsOperation ::= EXISTS LPAREN CollectionParameters DOISPONTOS TypeSpecifier BARRA OCLExpression RPAREN
				| EXISTS LPAREN CollectionParameters BARRA OCLExpression RPAREN
				| EXISTS LPAREN OCLExpression RPAREN;
IncludingOperation ::= INCLUDES LPAREN ID RPAREN;
ExcludingOperation ::= EXCLUDES LPAREN ID RPAREN;
ForAllOperation ::= FORALL LPAREN CollectionParameters DOISPONTOS TypeSpecifier BARRA OCLExpression RPAREN
				| FORALL LPAREN CollectionParameters BARRA OCLExpression RPAREN
				| FORALL LPAREN OCLExpression RPAREN;
SizeOperation ::= SIZE LPAREN RPAREN;
CollectionParameters ::= PropertyCall
				| PropertyCall VIRGULA CollectionParameters;


//Tipos
TypeSpecifier ::= PathName | INTTYPE | REALTYPE | VOID | STRING |  BOOLEAN ;
//Literais
PropertyCall ::= RESULT
				| PathName
				| PathName LPAREN RPAREN
				| PathName LPAREN FormalParameters RPAREN
				| PathName PONTO PropertyCall;
FormalParameters ::= FormalParameters VIRGULA FormalParameter
				|FormalParameter;				
FormalParameter ::= ID DOISPONTOS TypeSpecifier
				|PropertyCall;
PathName ::= ID | ID PONTO PathName ;
Number ::= INTEGER | REAL;
BoolValue ::= TRUE | FALSE;
//Operators
LogicalOperator ::= AND | OR | XOR | IMPLIES;
CollectionKind ::= SET | BAG | SEQUENCE | COLLECTION;
RelationalOperator ::= MAIORQ | MAIORIGUAL | MENORQ | MENORIGUAL | IGUAL | DIFF;
AddOperator ::= MAIS | MENOS;
MultiplyOperator ::= VEZES | DIVIDIR;
UnaryOperator ::= NOT | MENOS | SETA;