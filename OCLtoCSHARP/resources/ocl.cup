import java_cup.runtime.*;
action code {: 
			private final int INCLUDING = 1;
			private final int EXCLUDING = 2;
			private final int EXISTS = 3;
			private final int FORALL = 4;
			private final int SELECT = 5;
			private final int SIZE = 6; 
			private int invCount = 0;
			private String getInvName() { invCount++; return "CheckInv" + invCount;}
			private int preCount = 0;
			private String getPreName() { preCount++; return "CheckPre" + preCount;}
			private int posCount = 0;
			private String getPosName() { posCount++; return "CheckPos" + posCount;} 
			private int forAllCount = 0;
			private String getForAllName() { forAllCount++; return "ForAll"+forAllCount; }
			private int existsCount = 0;
			private String getExistsName() { existsCount++; return "Exists"+existsCount; }
			private int selectCount = 0;
			private String getSelectName() { selectCount++; return "Select"+selectCount; } 
			private String caller;
			private void GenAuxMethod(String code) { System.out.println(code);}
			:};

/* Terminais (tokens vindos do lexer) */
terminal            PRE, POS, INV, SELECT, EXISTS, FORALL, IF, THEN, ELSE, IMPLIES, INCLUDING, EXCLUDING, OCLISNEW, ATPRE, RESULT, SIZE, CONTEXT, LPAREN, RPAREN;
terminal			LCOLCH, RCOLCH, LCHAVE, RCHAVE, DOISPONTOS, QUATROPONTOS, VIRGULA, IGUAL, DIFF, MENORQ, MAIORQ, MENORIGUAL, MAIORIGUAL, SETA, PONTOPONTO;
terminal			PONTO, SHARP, PONTOVIRGULA, BARRA, MAIS, MENOS, VEZES, DIVIDIR;
terminal Atributos	ID;
terminal Atributos			STRING, BOOLEAN, NUMBER, SET, BAG, SEQUENCE, COLLECTION;
terminal Atributos	INTEGER;
terminal 			VOID, AND, OR, XOR, NOT, ENDIF, INTTYPE, REALTYPE, PACKAGE, ENDPACKAGE;
terminal Atributos		REAL;
terminal Atributos	TRUE, FALSE;


/* Não terminais */
non terminal	Atributos OCLFile, OCLConstraints, Constraint, ContextDeclaration, ContextBody, Stereotype, OCLExpression, OperationContext, ClassifierContext;
non terminal	Atributos			OperationName, FormalParameters,  ReturnType, FormalParameter, TypeSpecifier, CollectionType, SimpleTypeSpecifier, PathName, OCLLiteral;
non terminal	Atributos		BoolValue, Number;
//Expressions
non terminal	Atributos		PostFixExpression, LogicalExpression, NumberExpression, RelationalExpression, PropertyCall, PropertyCallExpression, AdditiveExpression, MultiplicativeExpression, UnaryExpression, PrimaryExpression, InvExpression, PreExpression, EqualityExpression;
//Operators
non terminal	Atributos 		MultiplyOperator, PostfixOperator, RelationalOperator, UnaryOperator, AddOperator, LogicalOperator;
//Conditional Expressions
non terminal	Atributos			ConditionalExpression, IfExpression, ImpliesExpression;
//Collections
non terminal	Atributos			CollectionItems, CollectionExpression, LiteralCollection, CollectionOperations, SelectOperation, ExistsOperation, IncludingOperation, ExcludingOperation, ForAllOperation, SizeOperation, CollectionParameters;

precedence left IMPLIES;
precedence left XOR;
precedence left OR;
precedence left AND;
precedence left DIFF, IGUAL;
precedence left MENORIGUAL, MAIORIGUAL, MENORQ, MAIORQ;
precedence left IF, THEN, ELSE, ENDIF;
precedence left MAIS, MENOS;
precedence left VEZES, DIVIDIR;
precedence left PONTO, SETA;


/* Regras */
// Regra Inicial

start with OCLFile;

// Regras para constraints

OCLFile ::= PACKAGE ID OCLConstraints ENDPACKAGE
				| OCLConstraints;
				
OCLConstraints ::= Constraint OCLConstraints | Constraint;

Constraint ::= ContextDeclaration ContextBody;

ContextDeclaration ::= CONTEXT OperationContext 
				| CONTEXT ClassifierContext;
				
ContextBody ::= InvExpression: i {: System.out.println(i.Code); :}
				| PreExpression: i {: System.out.println(i.Code); :};
				
InvExpression ::= INV DOISPONTOS OCLExpression:e 
				{:	RESULT = new Atributos(null,null, "private void " + getInvName() + "() { " + "if (!(" + e.Code +")) throw new Exception(\"Inv violada\");" + " }"); :}
				| INV ID:i DOISPONTOS OCLExpression:e {: RESULT = new Atributos(null,null, "private void checkInv" + i.Value.toString()+ "() { " + "if (!(" + e.Code +"))  throw new Exception(\"Inv violada\");" + " }"); :};

PreExpression ::= PRE DOISPONTOS OCLExpression:e 
				  {:RESULT = new Atributos(null,null, "private void " +getPreName() + "() { " + "if (!(" + e.Code +")) throw new Exception(\"Pre violada\");" + " }"); :}
				| PRE ID:i DOISPONTOS OCLExpression:e 
				  {:RESULT = new Atributos(null,null, "private void CheckPre" +i.Code + "() { " + "if (!(" + e.Code +")) throw new Exception(\"Pre violada\");" + " }"); :}
				| POS DOISPONTOS OCLExpression:e 
				  {:RESULT = new Atributos(null,null, "private void " +getPosName() + "() { " + "if (!(" + e.Code +")) throw new Exception(\"Pos violada\");" + " }"); :}
				| POS ID:i DOISPONTOS OCLExpression:e 
				  {:RESULT = new Atributos(null,null, "private void CheckPos" + i.Code + "() { " + "if (!(" + e.Code +")) throw new Exception(\"Pos violada\");" + " }"); :}
				| PRE DOISPONTOS OCLExpression:e1 POS DOISPONTOS OCLExpression:e2 
				  {:RESULT = new Atributos(null,null, "private void " +getPreName() + "() { " + "if (!(" + e1.Code +")) throw new Exception(\"Pre violada\");" + " }"
						+"private void " + getPosName() + "() { " + "if (!(" + e2.Code +")) throw new Exception(\"Pos violada\");" + " }" ); :}
				| PRE ID:i1 DOISPONTOS OCLExpression:e1 POS ID:i2 DOISPONTOS OCLExpression:e2
				  {: RESULT = new Atributos(null,null, "private void CheckPre" + i1.Code + "() { " + "if (!(" + e1.Code +")) throw new Exception(\"Pre violada\");" + " }"
						+"private void CheckPos" + i2.Code + "() { " + "if (!(" + e2.Code +")) throw new Exception(\"Pos violada\");" + " }" ); :};

OperationContext ::= ID QUATROPONTOS PropertyCall  
				| ID QUATROPONTOS PropertyCall DOISPONTOS TypeSpecifier ;
				
ClassifierContext ::= ID:i DOISPONTOS ID {:
					if (!XmiParser.isValidClass(i.Value.toString())){
						System.err.println("\n\nERRO DE COMPILACAO, NAO EXISTE CLASSE " + i.Value.toString() + " DEFINIDA NO XMI1");
						System.exit(0);
					}
				:} 
				| ID:i {: 
					if (!XmiParser.isValidClass(i.Value.toString())){
						System.err.println("\n\nERRO DE COMPILACAO, NAO EXISTE CLASSE " + i.Value.toString() + " DEFINIDA NO XMIz");
						System.exit(0);}
					:};

// Expressões 

OCLExpression ::= LogicalExpression: e {: RESULT = new Atributos(null,null,e.Code);:};

LogicalExpression ::= RelationalExpression:e {: RESULT = e; :}
				| RelationalExpression:e1 LogicalOperator:o LogicalExpression:e2 
				{:	
					if(e1.Type != Boolean.class || e2.Type != Boolean.class){
						System.err.println("\n\nERRO DE COMPILACAO LogicalExpression");
						System.exit(0);
					}
					if(o.Value.equals("&&")){
						RESULT = new Atributos(Boolean.class, new Boolean( (boolean) ( ((Boolean)e1.Value).booleanValue() && ((Boolean)e2.Value).booleanValue() )), e1.Code + " " + o.Code + " " + e2.Code);
					} else if (o.Value.equals("||")){
						RESULT = new Atributos(Boolean.class, new Boolean( (boolean) ( ((Boolean)e1.Value).booleanValue() || ((Boolean)e2.Value).booleanValue() )), e1.Code + " " + o.Code + " " + e2.Code);
					} else if (o.Value.equals("^")){
						RESULT = new Atributos(Boolean.class, new Boolean( (boolean) ( ((Boolean)e1.Value).booleanValue() ^ ((Boolean)e2.Value).booleanValue() )), e1.Code + " " + o.Code + " " + e2.Code);
					} else if (o.Value.equals("implies")){
						RESULT = new Atributos(null,null, "!(" + e1.Code + " or " + e2.Code );
					}
				:};
				
RelationalExpression  ::= AdditiveExpression: e {: RESULT = e; :}
				| AdditiveExpression:e1 RelationalOperator:o RelationalExpression:e2 {: RESULT = new Atributos(null,null,e1.Code + " " + o.Code +  " " +e2.Code); :};
				
AdditiveExpression ::= MultiplicativeExpression:e {: RESULT = e; :}
				| MultiplicativeExpression:e1 AddOperator:o AdditiveExpression:e2
				{:
				if(e1.Type == Integer.class && e2.Type == Integer.class){
						if(o.Value.equals("+")){
							RESULT = new Atributos(Integer.class, new Integer( (int) ( ((Integer)e1.Value).intValue() + ((Integer)e2.Value).intValue() )), e1.Code + " " + o.Code + " " + e2.Code);
							System.out.println(RESULT.Value.toString());
						} else if (o.Value.equals("-")){
							RESULT = new Atributos(Integer.class, new Integer( (int) ( ((Integer)e1.Value).intValue() - ((Integer)e2.Value).intValue() )), e1.Code + " " + o.Code + " " + e2.Code);
							System.out.println(RESULT.Value.toString());
						}
			   	} else if( (e1.Type == Double.class && e2.Type == Double.class) ||
				          (e1.Type == Integer.class && e2.Type == Double.class) ||
				          (e1.Type == Double.class && e2.Type == Integer.class) ) {
			   			if(o.Value.equals("+")){
							RESULT = new Atributos(Double.class, new Double( (double) ( ((Double)e1.Value).doubleValue() + ((Double)e2.Value).doubleValue() )), e1.Code + " " + o.Code + " " + e2.Code);
							System.out.println(RESULT.Value.toString());
						} else if (o.Value.equals("-")){
							RESULT = new Atributos(Double.class, new Double( (double) ( ((Double)e1.Value).doubleValue() - ((Double)e2.Value).doubleValue() )), e1.Code + " " + o.Code + " " + e2.Code);
							System.out.println(RESULT.Value.toString());
						}
			   	} else {
			   			System.err.println("\n\nERRO DE COMPILACAO AdditiveExpression");
			   			System.exit(0);
	   			}
				:};
				
MultiplicativeExpression ::= UnaryExpression:e {: RESULT = e; :}
				| UnaryExpression:e1 MultiplyOperator:o MultiplicativeExpression:e2
				{:
				if(e1.Type == Integer.class && e2.Type == Integer.class){
						if(o.Value.equals("*")){
							RESULT = new Atributos(Integer.class, new Integer( (int) ( ((Integer)e1.Value).intValue() * ((Integer)e2.Value).intValue() )), e1.Code + " " + o.Code + " " + e2.Code);
							System.out.println("ALOK1");
						} else if (o.Value.equals("/")){
							RESULT = new Atributos(Integer.class, new Integer( (int) ( ((Integer)e1.Value).intValue() / ((Integer)e2.Value).intValue() )), e1.Code + " " + o.Code + " " + e2.Code);
							System.out.println("ALOK2");
						}
			   	} else if( (e1.Type == Double.class && e2.Type == Double.class) ||
				          (e1.Type == Integer.class && e2.Type == Double.class) ||
				          (e1.Type == Double.class && e2.Type == Integer.class) ) {
			   			if(o.Value.equals("*")){
							RESULT = new Atributos(Double.class, new Double( (double) ( ((Double)e1.Value).doubleValue() * ((Double)e2.Value).doubleValue() )), e1.Code + " " + o.Code + " " + e2.Code);
							System.out.println("ALOK1");
						} else if (o.Value.equals("/")){
							RESULT = new Atributos(Double.class, new Double( (double) ( ((Double)e1.Value).doubleValue() / ((Double)e2.Value).doubleValue() )), e1.Code + " " + o.Code + " " + e2.Code);
							System.out.println("ALOK2");
						}
			   	} else {
			   			System.err.println("\n\nERRO DE COMPILACAO MultiplicativeExpression");
			   			System.exit(0);
	   			}
				:};
				
UnaryExpression ::= PrimaryExpression: e {: RESULT = new Atributos(e.Type,e.Value,e.Code, e.ColKind); :}
				| UnaryOperator:o UnaryExpression:e  {: RESULT = new Atributos(null,null,o.Code + e.Code); :}
				| PrimaryExpression:e1 UnaryOperator:o UnaryExpression:e2 {: 
						if(o.Code.equals("seta")) {
							switch (e2.ColKind){
								case INCLUDING : RESULT = new Atributos(Boolean.class,null,e1.Code + "." + e2.Code); break;
								case EXCLUDING : RESULT = new Atributos(Boolean.class,null,"!(" + e1.Code + "." + e2.Code + ")"); break;
								case SIZE : RESULT = new Atributos(Integer.class,null,e1.Code + e2.Code); break;
								case FORALL : RESULT = new Atributos(Boolean.class,null,e2.Code + "(" + e1.Code + ")"); break;
								case SELECT : RESULT = new Atributos(null,null,e2.Code + "(" + e1.Code + ")"); break;
								case EXISTS : RESULT = new Atributos(null,null,e2.Code + "(" + e1.Code + ")"); break;
								default : RESULT = new Atributos(e2.Type,null,e1.Code + e2.Code);
								}
							
							};
							 
						:};
PrimaryExpression ::= LiteralCollection:l {: RESULT = l; :}
				| IfExpression:e  {: RESULT = new Atributos(null,null,e.Code); :}
				| LPAREN OCLExpression:e RPAREN  {: RESULT = new Atributos(null,null,"("+e.Code+")"); :}
				| CollectionExpression:c  {: RESULT = new Atributos(null,null,c.Code, c.ColKind); :}
				;

LiteralCollection ::= Number:n {: RESULT = n; :}
				| BoolValue:b {: RESULT = b; :}
				| STRING:s {: RESULT = new Atributos(null,null,s.Value.toString());:} 
				| PropertyCall:p {: RESULT = new Atributos(null,null,p.Code);:}
				| PropertyCall:p ATPRE;
				
IfExpression ::= IF LogicalExpression:e1 THEN  LogicalExpression:e2  ELSE  LogicalExpression:e3 ENDIF
				{: RESULT = new Atributos(null,null, e1.Code + "?" + e2.Code + " : " + e3.Code); :};		

//Expressões em coleções	
			
CollectionExpression ::= CollectionOperations:c {: RESULT = new Atributos(null,null,c.Code, c.ColKind);:};

CollectionOperations ::= SelectOperation:o {: RESULT = new Atributos(null,null,o.Code, o.ColKind);:}
				|ExistsOperation:o {: RESULT = new Atributos(null,null,o.Code, o.ColKind);:}
				|IncludingOperation:o {: RESULT = new Atributos(null,null,o.Code, o.ColKind);:}
				|ExcludingOperation:o {: RESULT = new Atributos(null,null,o.Code, o.ColKind);:}
				|ForAllOperation:o {: RESULT = new Atributos(null,null,o.Code, o.ColKind);:}
				|SizeOperation:o {: RESULT = new Atributos(null,null,o.Code, o.ColKind);:};
				
SelectOperation ::= SELECT LPAREN CollectionParameters:cp DOISPONTOS TypeSpecifier:ts  BARRA OCLExpression:e RPAREN
					{:
					String tab = "\t";
					String newLine = System.getProperty("line.separator");
					StringBuilder code = new StringBuilder();
					String[] vars = cp.Code.split(",");
					String[] indexes = new String[vars.length];
					String selectName = getSelectName();
					code.append("private IEnumerable " + selectName + "( ICollection collection ){" + newLine);
					code.append( "bool result = true; " + newLine);
					code.append( ts.Code + " " + cp.Code +";"+ newLine);
					for(int i = 0; i < vars.length; i++){
					  String forIndex = "index"+i;
					  indexes[i] = forIndex;
					  if (i == 0)
					  	code.append( "for(int " + indexes[i] + " = 0; " + indexes[i] + "< collection.Count(); " + indexes[i] + "++) " + newLine);
					  else
					    code.append( "for(int " + indexes[i] + " = " + indexes[i-1] + "; " + indexes[i] + "< collection.Count(); " + indexes[i] + "++) " + newLine);
					}
					code.append(  "{" + newLine);
					for(int i = 0; i < vars.length; i++)
						code.append(   vars[i] + " = collection[" + indexes[i] + "];" + newLine);
					
					code.append(  "if(" + e.Code + ")" + newLine +    "{" + newLine);
					for(int i = 0; i < vars.length; i++)
						code.append(   "yield return " + vars[i] + ";" + newLine);
					code.append(   "}");
					code.append(  "}" + newLine);
					code.append( "}" + newLine);
									
					GenAuxMethod(code.toString());
					RESULT = new Atributos(null,null,selectName, SELECT);
				:}
				| SELECT LPAREN CollectionParameters:cp BARRA OCLExpression:e RPAREN
				{:
					String tab = "\t";
					String newLine = System.getProperty("line.separator");
					StringBuilder code = new StringBuilder();
					String[] vars = cp.Code.split(",");
					String[] indexes = new String[vars.length];
					String selectName = getSelectName();
					code.append("private IEnumerable " + selectName + "( ICollection collection ){" + newLine);
					code.append( "var " + cp.Code + ";"+newLine);
					for(int i = 0; i < vars.length; i++){
					  String forIndex = "index"+i;
					  indexes[i] = forIndex;
					  if (i == 0)
					  	code.append( "for(int " + indexes[i] + " = 0; " + indexes[i] + "< collection.Count(); " + indexes[i] + "++) " + newLine);
					  else
					    code.append( "for(int " + indexes[i] + " = " + indexes[i-1] + "; " + indexes[i] + "< collection.Count(); " + indexes[i] + "++) " + newLine);
					}
					code.append(  "{" + newLine);
					for(int i = 0; i < vars.length; i++)
						code.append(   vars[i] + " = collection[" + indexes[i] + "];" + newLine);
					
					code.append(  "if(" + e.Code + ")" + newLine +    "{" + newLine);
					
					for(int i = 0; i < vars.length; i++)
						code.append(   "yield return " + vars[i] + ";" + newLine);
					code.append(  "}" + newLine);	
					code.append( "}" + newLine);
					code.append( "}" + newLine);
					GenAuxMethod(code.toString());
					RESULT = new Atributos(null,null,selectName, EXISTS);
				:}
				
				| SELECT LPAREN OCLExpression:e RPAREN
				{:
					String tab = "\t";
					String newLine = System.getProperty("line.separator");
					StringBuilder code = new StringBuilder();
					String selectName = getSelectName();
					code.append("private IEnumerable " + selectName + "( ICollection collection ){" + newLine);
					
					
					code.append( "foreach(var v in collection) {" + newLine);					
					code.append(  "if (" + e.Code + ") yield return v;" + newLine );
					code.append( "}" + newLine);
					code.append( "}" + newLine);	
					GenAuxMethod(code.toString());
					RESULT = new Atributos(null,null,selectName, SELECT);
					
				:}
				;

ExistsOperation ::= EXISTS LPAREN CollectionParameters:cp DOISPONTOS TypeSpecifier:ts BARRA OCLExpression:e RPAREN
					{:
					String tab = "\t";
					String newLine = System.getProperty("line.separator");
					StringBuilder code = new StringBuilder();
					String[] vars = cp.Code.split(",");
					String[] indexes = new String[vars.length];
					String existsName = getExistsName();
					code.append("private bool " + existsName + "( ICollection collection ){" + newLine);
					code.append( ts.Code + " " + cp.Code +";"+ newLine);
					for(int i = 0; i < vars.length; i++){
					  String forIndex = "index"+i;
					  indexes[i] = forIndex;
					  if (i == 0)
					  	code.append( "for(int " + indexes[i] + " = 0; " + indexes[i] + "< collection.Count(); " + indexes[i] + "++) " + newLine);
					  else
					    code.append( "for(int " + indexes[i] + " = " + indexes[i-1] + "; " + indexes[i] + "< collection.Count(); " + indexes[i] + "++) " + newLine);
					}
					code.append(  "{" + newLine);
					for(int i = 0; i < vars.length; i++)
						code.append(   vars[i] + " = collection[" + indexes[i] + "];" + newLine);
					
					code.append(  "if(" + e.Code + ") return true;" + newLine );
					code.append( "}" + newLine);
					code.append("return false;" + newLine + "}");
					
					GenAuxMethod(code.toString());
					RESULT = new Atributos(null,null,existsName, EXISTS);
					
				:}
				| EXISTS LPAREN CollectionParameters:cp BARRA OCLExpression:e RPAREN
				{:
					String tab = "\t";
					String newLine = System.getProperty("line.separator");
					StringBuilder code = new StringBuilder();
					String[] vars = cp.Code.split(",");
					String[] indexes = new String[vars.length];
					String existsName = getExistsName();
					code.append("private bool " + existsName + "( ICollection collection ){" + newLine);
					code.append( "var " + cp.Code + ";"+newLine);
					for(int i = 0; i < vars.length; i++){
					  String forIndex = "index"+i;
					  indexes[i] = forIndex;
					  if (i == 0)
					  	code.append( "for(int " + indexes[i] + " = 0; " + indexes[i] + "< collection.Count(); " + indexes[i] + "++) " + newLine);
					  else
					    code.append( "for(int " + indexes[i] + " = " + indexes[i-1] + "; " + indexes[i] + "< collection.Count(); " + indexes[i] + "++) " + newLine);
					}
					code.append(  "{" + newLine);
					for(int i = 0; i < vars.length; i++)
						code.append(   vars[i] + " = collection[" + indexes[i] + "];" + newLine);
					
					code.append(  "if(" + e.Code + ") return true;" + newLine );
					code.append( "}" + newLine);
					code.append("return false;" + newLine + "}");
					
					GenAuxMethod(code.toString());
					RESULT = new Atributos(null,null,existsName, EXISTS);
					
				:}
				| EXISTS LPAREN OCLExpression:e RPAREN
				{:
					String tab = "\t";
					String newLine = System.getProperty("line.separator");
					StringBuilder code = new StringBuilder();
					String existsName = getExistsName();
					code.append("private bool " + existsName + "( ICollection collection ){" + newLine);
								
					
					code.append( "foreach(var v in collection) {" + newLine);					
					code.append(  "if(" + e.Code + ") return true;" + newLine );
					
					code.append("return false;" + newLine + "}");
					
					GenAuxMethod(code.toString());
					RESULT = new Atributos(null,null,existsName, EXISTS);
					
				:};

IncludingOperation ::= INCLUDING LPAREN ID:i RPAREN {: 
				RESULT = new Atributos(null,null,"Contains(" + i.Value + ")", INCLUDING);
			:};

ExcludingOperation ::= EXCLUDING LPAREN ID:i RPAREN {: 
				RESULT = new Atributos(null,null,"Contains(" + i.Value + ")", EXCLUDING);
			:};

ForAllOperation ::= FORALL LPAREN CollectionParameters:cp DOISPONTOS TypeSpecifier:ts BARRA OCLExpression:e RPAREN
				{:
					String tab = "\t";
					String newLine = System.getProperty("line.separator");
					StringBuilder code = new StringBuilder();
					String[] vars = cp.Code.split(",");
					String[] indexes = new String[vars.length];
					String forAllName = getForAllName();
					code.append("private bool " + forAllName + "( ICollection collection ){" + newLine);
					code.append( "bool result = true; " + newLine);
					code.append( ts.Code + " " + cp.Code +";"+ newLine);
					for(int i = 0; i < vars.length; i++){
					  String forIndex = "index"+i;
					  indexes[i] = forIndex;
					  if (i == 0)
					  	code.append( "for(int " + indexes[i] + " = 0; " + indexes[i] + "< collection.Count(); " + indexes[i] + "++) " + newLine);
					  else
					    code.append( "for(int " + indexes[i] + " = " + indexes[i-1] + "; " + indexes[i] + "< collection.Count(); " + indexes[i] + "++) " + newLine);
					}
					code.append(  "{" + newLine);
					for(int i = 0; i < vars.length; i++)
						code.append(   vars[i] + " = collection[" + indexes[i] + "];" + newLine);
					
					code.append(  "result = result and " + e.Code + ";" + newLine );
					code.append( "}" + newLine);
					code.append("return result;" + newLine + "}");
					
					GenAuxMethod(code.toString());
					RESULT = new Atributos(null,null,forAllName, FORALL);
					
				:}
				| FORALL LPAREN CollectionParameters:cp BARRA OCLExpression:e RPAREN
				{:
					String tab = "\t";
					String newLine = System.getProperty("line.separator");
					StringBuilder code = new StringBuilder();
					String[] vars = cp.Code.split(",");
					String[] indexes = new String[vars.length];
					String forAllName = getForAllName();
					code.append("private bool " + forAllName + "( ICollection collection ){" + newLine);
					code.append( "bool result = true; " + newLine);
					code.append( "var " + cp.Code + ";"+newLine);
					for(int i = 0; i < vars.length; i++){
					  String forIndex = "index"+i;
					  indexes[i] = forIndex;
					  if (i == 0)
					  	code.append( "for(int " + indexes[i] + " = 0; " + indexes[i] + "< collection.Count(); " + indexes[i] + "++) " + newLine);
					  else
					    code.append( "for(int " + indexes[i] + " = " + indexes[i-1] + "; " + indexes[i] + "< collection.Count(); " + indexes[i] + "++) " + newLine);
					}
					code.append(  "{" + newLine);
					for(int i = 0; i < vars.length; i++)
						code.append(   vars[i] + " = collection[" + indexes[i] + "];" + newLine);
					
					code.append(  "result = result && (" + e.Code + ");" + newLine );
					code.append( "}" + newLine);
					code.append("return result;" + newLine + "}");
					
					GenAuxMethod(code.toString());
					RESULT = new Atributos(null,null,forAllName, FORALL);
					
				:}
				| FORALL LPAREN OCLExpression:e RPAREN
					{:
					String tab = "\t";
					String newLine = System.getProperty("line.separator");
					StringBuilder code = new StringBuilder();
					String forAllName = getForAllName();
					code.append("private bool " + forAllName + "( ICollection collection ){" + newLine);
					code.append( "bool result = true; " + newLine);
						
					
					code.append( "foreach(var v in collection) {" + newLine);					
					code.append(  "result = result && ( v." + e.Code + ");" + newLine );
					code.append("}" + newLine);
					code.append("return result;" + newLine + "}");
					code.append("}" + newLine);
					GenAuxMethod(code.toString());
					RESULT = new Atributos(null,null,forAllName, FORALL);
					
				:};

SizeOperation ::= SIZE LPAREN RPAREN {: RESULT = new Atributos(null,null,".Count()");:} ;

CollectionParameters ::= PropertyCall:p {: RESULT = p; :}
				| PropertyCall:p VIRGULA CollectionParameters:cp {: RESULT = new Atributos(null,null,p.Code + "," + cp.Code); :};


//Tipos

TypeSpecifier ::= PathName:p {: RESULT = new Atributos(null,null,p.Code);:}
		| INTTYPE{: RESULT = new Atributos(null,null,"int");:} 
		| REALTYPE{: RESULT = new Atributos(null,null,"double");:} 
		| VOID{: RESULT = new Atributos(null,null,"void");:} 
		| STRING{: RESULT = new Atributos(null,null,"string");:}
		| BOOLEAN{: RESULT = new Atributos(null,null,"boolean");:} ;
		
//Literais

PropertyCall ::= RESULT {: RESULT = new Atributos(null,null,"result");:}
				| PathName:p {: RESULT = new Atributos(null,null,p.Code);:}
				| PathName:p LPAREN RPAREN {: RESULT = new Atributos(null,null,p.Code + "()");:}
				| PathName:p LPAREN FormalParameters:fp RPAREN {: RESULT = new Atributos(null,null,p.Code + " (" + fp.Code + ")");:}
				| PathName:p PONTO PropertyCall:p2 {: RESULT = new Atributos(null,null,p.Code + "." + p2.Code);:};
				
FormalParameters ::= FormalParameters:f VIRGULA FormalParameter:f2 {: RESULT = new Atributos(null,null, f.Code + "," + f2.Code);:}
				|FormalParameter:f {: RESULT = new Atributos(null,null,f.Code);:};	
							
FormalParameter ::= ID:i DOISPONTOS TypeSpecifier:t {: RESULT = new Atributos(null,null,t.Code + " " + i.Code );:}
				|PropertyCall:p {: RESULT = new Atributos(null,null,p.Code);:};
				
PathName ::= ID:i {: if (i.Value.equals("self")) RESULT = new Atributos(null,null,"this"); else RESULT = new Atributos(null,null,i.Value.toString());:} 
		| ID:i PONTO PathName:p {: if (i.Value.equals("self")) RESULT = new Atributos(null,null,"this." + p.Code); else RESULT = new Atributos(null,null,i.Value.toString() + "." + p.Code);:};
		
Number ::= INTEGER:i {:RESULT = new Atributos(i.Type,Integer.parseInt(i.Value.toString()),i.Value.toString());:}
			| REAL:r {: RESULT = new Atributos(r.Type,Double.parseDouble(r.Value.toString()),r.Value.toString());:};

BoolValue ::= TRUE:t {: RESULT = new Atributos(t.Type,t.Value,"true");:} 
			| FALSE:f {: RESULT = new Atributos(f.Type,f.Value,"false");:};
		
//Operators

LogicalOperator ::= AND {: RESULT = new Atributos(String.class,"&&","&&");:}
				  | OR{: RESULT = new Atributos(String.class,"||","||");:} 
				  | XOR {: RESULT = new Atributos(String.class,"^","^");:}
				  | IMPLIES {: RESULT = new Atributos(String.class,"implies","implies"); :};
		
RelationalOperator ::= MAIORQ{: RESULT = new Atributos(String.class,">",">");:} 
					 | MAIORIGUAL{: RESULT = new Atributos(String.class,">=",">=");:} 
					 | MENORQ{: RESULT = new Atributos(String.class,"<","<");:} 
					 | MENORIGUAL{: RESULT = new Atributos(String.class,"<=","<=");:} 
					 | IGUAL{: RESULT = new Atributos(String.class,"==","==");:} 
					 | DIFF{: RESULT = new Atributos(String.class,"!=","!=");:};

		
AddOperator ::= MAIS {: RESULT = new Atributos(String.class,"+","+");:} | MENOS {: RESULT = new Atributos(String.class,"-","-");:};

MultiplyOperator ::= VEZES {: RESULT = new Atributos(String.class,"*","*"); :} | DIVIDIR {: RESULT = new Atributos(String.class,"/","/"); :};
UnaryOperator ::= NOT {: RESULT = new Atributos(String.class,"!","!");:}
				| SETA {: RESULT = new Atributos(String.class,"!","seta");:};