
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 23 13:09:15 GMT-03:00 2010
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 23 13:09:15 GMT-03:00 2010
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\004\004\000\002\004\004" +
    "\000\002\005\005\000\002\005\006\000\002\010\007\000" +
    "\002\010\010\000\002\010\012\000\002\014\003\000\002" +
    "\011\005\000\002\011\003\000\002\012\003\000\002\013" +
    "\005\000\002\013\003\000\002\016\005\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\027\005\000\002\027\005\000\002\027" +
    "\004\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\003\000\002\027\003\000\002\030\003\000" +
    "\002\030\005\000\002\030\005\000\002\031\005\000\002" +
    "\032\006\000\002\032\005\000\002\032\003\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\044\003\000\002\044\003\000\002" +
    "\046\005\000\002\045\011\000\002\050\005\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\053\006\000" +
    "\002\053\010\000\002\054\012\000\002\054\010\000\002" +
    "\054\005\000\002\055\006\000\002\056\006\000\002\057" +
    "\012\000\002\057\010\000\002\057\005\000\002\060\005" +
    "\000\002\060\007\000\002\060\007\000\002\061\003\000" +
    "\002\061\005\000\002\017\003\000\002\017\003\000\002" +
    "\020\006\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\023\003\000\002\023\005\000\002\015\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\026\003\000\002\026\003\000\002\025\003\000\002\025" +
    "\003\000\002\051\006\000\002\051\005\000\002\047\003" +
    "\000\002\047\005\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\035\003\000\002\035" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\042\003\000\002\042\003\000" +
    "\002\034\003\000\002\034\003\000\002\040\003\000\002" +
    "\040\003\000\002\036\003\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\004\024\007\001\002\000\004\002\305\001" +
    "\002\000\006\002\uffff\024\007\001\002\000\010\004\036" +
    "\005\037\006\040\001\002\000\004\056\010\001\002\000" +
    "\014\004\ufff4\005\ufff4\006\ufff4\033\014\034\013\001\002" +
    "\000\010\004\ufffc\005\ufffc\006\ufffc\001\002\000\010\004" +
    "\ufffd\005\ufffd\006\ufffd\001\002\000\004\056\016\001\002" +
    "\000\004\056\015\001\002\000\010\004\ufff5\005\ufff5\006" +
    "\ufff5\001\002\000\004\025\ufff3\001\002\000\004\025\020" +
    "\001\002\000\006\026\022\056\021\001\002\000\004\033" +
    "\034\001\002\000\010\004\ufff9\005\ufff9\006\ufff9\001\002" +
    "\000\006\026\ufff1\035\ufff1\001\002\000\006\026\025\035" +
    "\026\001\002\000\012\004\ufff8\005\ufff8\006\ufff8\033\030" +
    "\001\002\000\004\056\021\001\002\000\006\026\ufff2\035" +
    "\ufff2\001\002\000\004\056\031\001\002\000\014\004\uffab" +
    "\005\uffab\006\uffab\026\uffab\035\uffab\001\002\000\010\004" +
    "\ufff6\005\ufff6\006\ufff6\001\002\000\010\004\ufff7\005\ufff7" +
    "\006\ufff7\001\002\000\004\056\031\001\002\000\006\026" +
    "\ufff0\035\ufff0\001\002\000\006\033\uffef\056\uffef\001\002" +
    "\000\006\033\uffee\056\uffee\001\002\000\006\033\uffed\056" +
    "\uffed\001\002\000\006\033\044\056\043\001\002\000\006" +
    "\002\ufffe\024\ufffe\001\002\000\004\033\302\001\002\000" +
    "\024\012\053\025\054\056\055\057\056\061\052\062\063" +
    "\067\065\071\071\076\047\001\002\000\024\036\132\037" +
    "\130\040\131\041\133\042\127\043\134\073\221\074\223" +
    "\075\224\001\002\000\020\002\uffec\015\265\024\uffec\026" +
    "\uffec\073\221\074\223\075\224\001\002\000\022\025\054" +
    "\056\055\057\056\061\052\062\063\067\065\071\071\076" +
    "\047\001\002\000\010\002\uffcf\024\uffcf\026\uffcf\001\002" +
    "\000\010\002\uffd0\024\uffd0\026\uffd0\001\002\000\026\002" +
    "\uffa5\013\uffa5\014\uffa5\015\uffa5\024\uffa5\026\uffa5\073\uffa5" +
    "\074\uffa5\075\uffa5\077\uffa5\001\002\000\022\025\054\056" +
    "\055\057\056\061\052\062\063\067\065\071\071\076\047" +
    "\001\002\000\022\025\054\056\055\057\056\061\052\062" +
    "\063\067\065\071\071\076\047\001\002\000\056\002\uffad" +
    "\013\uffad\014\uffad\015\uffad\024\uffad\025\uffad\026\uffad\033" +
    "\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad" +
    "\043\uffad\044\uffad\046\254\051\uffad\073\uffad\074\uffad\075" +
    "\uffad\077\uffad\001\002\000\006\036\132\037\130\001\002" +
    "\000\014\002\uffea\024\uffea\026\uffea\036\132\037\130\001" +
    "\002\000\010\002\uffe8\024\uffe8\026\uffe8\001\002\000\010" +
    "\002\uffe9\024\uffe9\026\uffe9\001\002\000\006\002\ufffb\024" +
    "\ufffb\001\002\000\026\002\uffa4\013\uffa4\014\uffa4\015\uffa4" +
    "\024\uffa4\026\uffa4\073\uffa4\074\uffa4\075\uffa4\077\uffa4\001" +
    "\002\000\026\002\uffe1\013\uffe1\014\uffe1\015\uffe1\024\uffe1" +
    "\026\uffe1\073\uffe1\074\uffe1\075\uffe1\077\uffe1\001\002\000" +
    "\052\002\uffa7\013\uffa7\014\uffa7\015\uffa7\024\uffa7\026\uffa7" +
    "\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\052" +
    "\uffa7\053\uffa7\054\uffa7\055\uffa7\073\uffa7\074\uffa7\075\uffa7" +
    "\077\uffa7\001\002\000\026\002\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\024\uffe0\026\uffe0\073\uffe0\074\uffe0\075\uffe0\077\uffe0" +
    "\001\002\000\024\002\uffeb\024\uffeb\026\uffeb\036\132\037" +
    "\130\040\131\041\133\042\127\043\134\001\002\000\030" +
    "\025\104\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043" +
    "\uffd9\044\103\073\uffd9\074\uffd9\075\uffd9\001\002\000\052" +
    "\002\uffa6\013\uffa6\014\uffa6\015\uffa6\024\uffa6\026\uffa6\036" +
    "\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\052\uffa6" +
    "\053\uffa6\054\uffa6\055\uffa6\073\uffa6\074\uffa6\075\uffa6\077" +
    "\uffa6\001\002\000\052\002\uffdf\013\uffdf\014\uffdf\015\uffdf" +
    "\024\uffdf\026\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042" +
    "\uffdf\043\uffdf\052\073\053\077\054\075\055\074\073\uffdf" +
    "\074\uffdf\075\uffdf\077\uffdf\001\002\000\006\067\uff92\071" +
    "\uff92\001\002\000\006\067\uff8f\071\uff8f\001\002\000\006" +
    "\067\uff90\071\uff90\001\002\000\006\067\065\071\071\001" +
    "\002\000\006\067\uff91\071\uff91\001\002\000\006\067\065" +
    "\071\071\001\002\000\042\002\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\024\uffdd\026\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\043\uffdd\073\uffdd\074\uffdd\075\uffdd\077\uffdd\001" +
    "\002\000\042\002\uffde\013\uffde\014\uffde\015\uffde\024\uffde" +
    "\026\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043" +
    "\uffde\073\uffde\074\uffde\075\uffde\077\uffde\001\002\000\016" +
    "\007\120\010\115\011\114\016\117\017\113\023\124\001" +
    "\002\000\006\026\105\056\021\001\002\000\042\002\uffda" +
    "\013\uffda\014\uffda\015\uffda\024\uffda\026\uffda\036\uffda\037" +
    "\uffda\040\uffda\041\uffda\042\uffda\043\uffda\073\uffda\074\uffda" +
    "\075\uffda\077\uffda\001\002\000\006\026\107\035\026\001" +
    "\002\000\042\002\uffdb\013\uffdb\014\uffdb\015\uffdb\024\uffdb" +
    "\026\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043" +
    "\uffdb\073\uffdb\074\uffdb\075\uffdb\077\uffdb\001\002\000\010" +
    "\002\uffc9\024\uffc9\026\uffc9\001\002\000\010\002\uffcb\024" +
    "\uffcb\026\uffcb\001\002\000\010\002\uffc8\024\uffc8\026\uffc8" +
    "\001\002\000\004\025\247\001\002\000\024\012\053\025" +
    "\233\056\055\057\056\061\052\062\063\067\065\071\071" +
    "\076\047\001\002\000\024\012\053\025\153\056\055\057" +
    "\056\061\052\062\063\067\065\071\071\076\047\001\002" +
    "\000\010\002\uffc7\024\uffc7\026\uffc7\001\002\000\004\025" +
    "\150\001\002\000\004\025\141\001\002\000\010\002\uffca" +
    "\024\uffca\026\uffca\001\002\000\010\002\uffc6\024\uffc6\026" +
    "\uffc6\001\002\000\010\002\uffcc\024\uffcc\026\uffcc\001\002" +
    "\000\004\025\125\001\002\000\004\026\126\001\002\000" +
    "\024\002\uffbb\024\uffbb\026\uffbb\036\132\037\130\040\131" +
    "\041\133\042\127\043\134\001\002\000\010\056\uff93\067" +
    "\uff93\071\uff93\001\002\000\022\025\uff97\056\uff97\057\uff97" +
    "\061\uff97\062\uff97\067\uff97\071\uff97\076\uff97\001\002\000" +
    "\010\056\uff94\067\uff94\071\uff94\001\002\000\022\025\uff98" +
    "\056\uff98\057\uff98\061\uff98\062\uff98\067\uff98\071\uff98\076" +
    "\uff98\001\002\000\010\056\uff96\067\uff96\071\uff96\001\002" +
    "\000\010\056\uff95\067\uff95\071\uff95\001\002\000\006\067" +
    "\065\071\071\001\002\000\006\067\065\071\071\001\002" +
    "\000\010\002\uffb9\024\uffb9\026\uffb9\001\002\000\010\002" +
    "\uffba\024\uffba\026\uffba\001\002\000\024\012\053\025\054" +
    "\056\055\057\056\061\052\062\063\067\065\071\071\076" +
    "\047\001\002\000\004\026\147\001\002\000\032\025\104" +
    "\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044" +
    "\103\051\144\073\uffd9\074\uffd9\075\uffd9\001\002\000\024" +
    "\012\053\025\054\056\055\057\056\061\052\062\063\067" +
    "\065\071\071\076\047\001\002\000\004\026\146\001\002" +
    "\000\010\002\uffc4\024\uffc4\026\uffc4\001\002\000\010\002" +
    "\uffc5\024\uffc5\026\uffc5\001\002\000\004\056\151\001\002" +
    "\000\004\026\152\001\002\000\010\002\uffc0\024\uffc0\026" +
    "\uffc0\001\002\000\022\025\054\056\055\057\056\061\052" +
    "\062\063\067\065\071\071\076\047\001\002\000\004\026" +
    "\155\001\002\000\010\002\uffc1\024\uffc1\026\uffc1\001\002" +
    "\000\016\036\132\037\130\040\131\041\133\042\127\043" +
    "\134\001\002\000\012\026\220\073\221\074\223\075\224" +
    "\001\002\000\034\025\104\033\uffb8\035\215\036\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\051\uffb8\073\uffd9" +
    "\074\uffd9\075\uffd9\001\002\000\006\036\132\037\130\001" +
    "\002\000\006\033\164\051\163\001\002\000\024\012\053" +
    "\025\054\056\055\057\056\061\052\062\063\067\065\071" +
    "\071\076\047\001\002\000\026\056\055\057\175\063\171" +
    "\064\176\065\173\066\177\070\172\072\167\100\201\101" +
    "\174\001\002\000\006\026\uffb3\051\uffb3\001\002\000\004" +
    "\051\206\001\002\000\006\026\uffae\051\uffae\001\002\000" +
    "\004\025\203\001\002\000\004\025\uff9c\001\002\000\006" +
    "\026\uffb0\051\uffb0\001\002\000\004\025\uff9a\001\002\000" +
    "\006\026\uffb1\051\uffb1\001\002\000\006\026\uffaf\051\uffaf" +
    "\001\002\000\004\025\uff9b\001\002\000\004\025\uff99\001" +
    "\002\000\004\051\uffb6\001\002\000\006\026\uffb2\051\uffb2" +
    "\001\002\000\004\051\uffb5\001\002\000\016\056\055\057" +
    "\175\070\172\072\167\100\201\101\174\001\002\000\004" +
    "\026\205\001\002\000\004\051\uffb4\001\002\000\024\012" +
    "\053\025\054\056\055\057\056\061\052\062\063\067\065" +
    "\071\071\076\047\001\002\000\004\026\210\001\002\000" +
    "\010\002\uffc3\024\uffc3\026\uffc3\001\002\000\004\026\212" +
    "\001\002\000\010\002\uffc2\024\uffc2\026\uffc2\001\002\000" +
    "\004\057\056\001\002\000\026\002\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\024\uffe2\026\uffe2\073\uffe2\074\uffe2\075\uffe2\077" +
    "\uffe2\001\002\000\004\056\055\001\002\000\006\033\uffb7" +
    "\051\uffb7\001\002\000\010\033\uffb8\035\215\051\uffb8\001" +
    "\002\000\026\002\uffe7\013\uffe7\014\uffe7\015\uffe7\024\uffe7" +
    "\026\uffe7\073\uffe7\074\uffe7\075\uffe7\077\uffe7\001\002\000" +
    "\022\025\uff9f\056\uff9f\057\uff9f\061\uff9f\062\uff9f\067\uff9f" +
    "\071\uff9f\076\uff9f\001\002\000\022\025\054\056\055\057" +
    "\056\061\052\062\063\067\065\071\071\076\047\001\002" +
    "\000\022\025\uff9e\056\uff9e\057\uff9e\061\uff9e\062\uff9e\067" +
    "\uff9e\071\uff9e\076\uff9e\001\002\000\022\025\uff9d\056\uff9d" +
    "\057\uff9d\061\uff9d\062\uff9d\067\uff9d\071\uff9d\076\uff9d\001" +
    "\002\000\026\002\uffe6\013\uffe6\014\uffe6\015\uffe6\024\uffe6" +
    "\026\uffe6\073\221\074\223\075\224\077\uffe6\001\002\000" +
    "\044\002\uffd9\013\uffd9\014\uffd9\015\uffd9\024\uffd9\025\104" +
    "\026\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043" +
    "\uffd9\073\uffd9\074\uffd9\075\uffd9\077\uffd9\001\002\000\006" +
    "\067\065\071\071\001\002\000\006\067\065\071\071\001" +
    "\002\000\026\002\uffe3\013\uffe3\014\uffe3\015\uffe3\024\uffe3" +
    "\026\uffe3\073\uffe3\074\uffe3\075\uffe3\077\uffe3\001\002\000" +
    "\026\002\uffe4\013\uffe4\014\uffe4\015\uffe4\024\uffe4\026\uffe4" +
    "\073\uffe4\074\uffe4\075\uffe4\077\uffe4\001\002\000\022\025" +
    "\054\056\055\057\056\061\052\062\063\067\065\071\071" +
    "\076\047\001\002\000\004\026\235\001\002\000\010\002" +
    "\uffbc\024\uffbc\026\uffbc\001\002\000\006\033\240\051\237" +
    "\001\002\000\024\012\053\025\054\056\055\057\056\061" +
    "\052\062\063\067\065\071\071\076\047\001\002\000\026" +
    "\056\055\057\175\063\171\064\176\065\173\066\177\070" +
    "\172\072\167\100\201\101\174\001\002\000\004\051\242" +
    "\001\002\000\024\012\053\025\054\056\055\057\056\061" +
    "\052\062\063\067\065\071\071\076\047\001\002\000\004" +
    "\026\244\001\002\000\010\002\uffbe\024\uffbe\026\uffbe\001" +
    "\002\000\004\026\246\001\002\000\010\002\uffbd\024\uffbd" +
    "\026\uffbd\001\002\000\004\056\250\001\002\000\004\026" +
    "\251\001\002\000\010\002\uffbf\024\uffbf\026\uffbf\001\002" +
    "\000\004\057\253\001\002\000\032\002\uffdc\013\uffdc\014" +
    "\uffdc\015\uffdc\024\uffdc\026\uffdc\036\uffdc\037\uffdc\073\uffdc" +
    "\074\uffdc\075\uffdc\077\uffdc\001\002\000\004\056\055\001" +
    "\002\000\054\002\uffac\013\uffac\014\uffac\015\uffac\024\uffac" +
    "\025\uffac\026\uffac\033\uffac\035\uffac\036\uffac\037\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\044\uffac\051\uffac\073\uffac" +
    "\074\uffac\075\uffac\077\uffac\001\002\000\012\013\257\073" +
    "\221\074\223\075\224\001\002\000\022\025\054\056\055" +
    "\057\056\061\052\062\063\067\065\071\071\076\047\001" +
    "\002\000\012\014\261\073\221\074\223\075\224\001\002" +
    "\000\022\025\054\056\055\057\056\061\052\062\063\067" +
    "\065\071\071\076\047\001\002\000\012\073\221\074\223" +
    "\075\224\077\263\001\002\000\010\002\uffcd\024\uffcd\026" +
    "\uffcd\001\002\000\026\002\uffe5\013\uffe5\014\uffe5\015\uffe5" +
    "\024\uffe5\026\uffe5\073\221\074\223\075\224\077\uffe5\001" +
    "\002\000\022\025\054\056\055\057\056\061\052\062\063" +
    "\067\065\071\071\076\047\001\002\000\016\002\uffce\024" +
    "\uffce\026\uffce\073\221\074\223\075\224\001\002\000\022" +
    "\025\054\056\055\057\056\061\052\062\063\067\065\071" +
    "\071\076\047\001\002\000\022\025\054\056\055\057\056" +
    "\061\052\062\063\067\065\071\071\076\047\001\002\000" +
    "\010\056\055\067\065\071\071\001\002\000\026\002\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\024\uffd3\026\uffd3\073\uffd3\074" +
    "\uffd3\075\uffd3\077\uffd3\001\002\000\026\002\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\024\uffd7\026\uffd7\073\uffd7\074\uffd7\075" +
    "\uffd7\077\uffd7\001\002\000\042\002\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\024\uffd6\026\uffd6\036\132\037\130\040\131\041" +
    "\133\042\127\043\134\073\221\074\223\075\224\077\uffd6" +
    "\001\002\000\042\002\uffd2\013\uffd2\014\uffd2\015\uffd2\024" +
    "\uffd2\026\uffd2\036\132\037\130\040\131\041\133\042\127" +
    "\043\134\073\uffd2\074\uffd2\075\uffd2\077\uffd2\001\002\000" +
    "\026\002\uffd4\013\uffd4\014\uffd4\015\uffd4\024\uffd4\026\uffd4" +
    "\073\221\074\223\075\224\077\uffd4\001\002\000\032\002" +
    "\uffd1\013\uffd1\014\uffd1\015\uffd1\024\uffd1\026\uffd1\036\132" +
    "\037\130\073\uffd1\074\uffd1\075\uffd1\077\uffd1\001\002\000" +
    "\042\002\uffd8\013\uffd8\014\uffd8\015\uffd8\024\uffd8\026\uffd8" +
    "\036\132\037\130\040\131\041\133\042\127\043\134\073" +
    "\221\074\223\075\224\077\uffd8\001\002\000\026\002\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\024\uffd5\026\uffd5\073\221\074" +
    "\223\075\224\077\uffd5\001\002\000\024\012\053\025\054" +
    "\056\055\057\056\061\052\062\063\067\065\071\071\076" +
    "\047\001\002\000\006\002\ufffa\024\ufffa\001\002\000\004" +
    "\002\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\010\002\003\003\004\004\005\001\001\000" +
    "\002\001\001\000\010\002\303\003\004\004\005\001\001" +
    "\000\006\005\041\006\040\001\001\000\006\010\011\011" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\023\016\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\026\001\001\000\002\001\001\000\006\014" +
    "\032\015\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\007\061\023\067\025\063\026\071\027\045\030\066" +
    "\031\056\032\044\033\065\044\060\045\047\046\050\050" +
    "\057\001\001\000\010\035\267\037\270\043\266\001\001" +
    "\000\004\043\221\001\001\000\022\023\225\025\063\026" +
    "\071\027\263\030\155\031\160\032\044\033\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\023\225\025\063\026\071\027\255\030\155\031\160" +
    "\032\044\033\065\001\001\000\022\023\225\025\063\026" +
    "\071\027\156\030\155\031\160\032\044\033\065\001\001" +
    "\000\002\001\001\000\004\035\251\001\001\000\004\035" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\035\227\037\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\077\042" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\071\030\101\001\001\000\002\001" +
    "\001\000\006\026\071\030\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\052\122\053\110\054\120\055" +
    "\107\056\111\057\115\060\121\001\001\000\006\013\105" +
    "\016\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\007\233\023\067\025" +
    "\063\026\071\027\045\030\066\031\056\032\044\033\065" +
    "\044\060\045\047\046\050\050\057\001\001\000\034\007" +
    "\153\023\067\025\063\026\071\027\045\030\066\031\056" +
    "\032\044\033\065\044\060\045\047\046\050\050\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\035\135\037\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\071\030\137\001\001\000\006\026\071\030" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\007\141\023\142\025\063\026\071\027\045\030\066\031" +
    "\056\032\044\033\065\044\060\045\047\046\050\050\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\007" +
    "\144\023\067\025\063\026\071\027\045\030\066\031\056" +
    "\032\044\033\065\044\060\045\047\046\050\050\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\023\157\025\063\026\071\027\156\030\155\031\160" +
    "\032\044\033\065\061\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\227\037\226\001\001\000\004" +
    "\043\221\001\001\000\002\001\001\000\004\035\212\001" +
    "\001\000\002\001\001\000\034\007\210\023\067\025\063" +
    "\026\071\027\045\030\066\031\056\032\044\033\065\044" +
    "\060\045\047\046\050\050\057\001\001\000\014\017\165" +
    "\020\177\021\167\022\201\023\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\203\023\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\007\206\023\067\025\063\026" +
    "\071\027\045\030\066\031\056\032\044\033\065\044\060" +
    "\045\047\046\050\050\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\213\001\001\000\002\001\001\000\006\023\216\061" +
    "\215\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\023\225\025\063\026" +
    "\071\027\224\030\155\031\160\032\044\033\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\221\001" +
    "\001\000\002\001\001\000\006\026\071\030\231\001\001" +
    "\000\006\026\071\030\230\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\023\157\025\063\026\071\027\156" +
    "\030\155\031\160\032\044\033\065\061\235\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\007\244\023\067\025\063\026\071\027\045\030\066\031" +
    "\056\032\044\033\065\044\060\045\047\046\050\050\057" +
    "\001\001\000\014\017\240\020\177\021\167\022\201\023" +
    "\164\001\001\000\002\001\001\000\034\007\242\023\067" +
    "\025\063\026\071\027\045\030\066\031\056\032\044\033" +
    "\065\044\060\045\047\046\050\050\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\254\001" +
    "\001\000\002\001\001\000\004\043\221\001\001\000\022" +
    "\023\225\025\063\026\071\027\257\030\155\031\160\032" +
    "\044\033\065\001\001\000\004\043\221\001\001\000\022" +
    "\023\225\025\063\026\071\027\261\030\155\031\160\032" +
    "\044\033\065\001\001\000\004\043\221\001\001\000\002" +
    "\001\001\000\004\043\221\001\001\000\022\023\225\025" +
    "\063\026\071\027\265\030\155\031\160\032\044\033\065" +
    "\001\001\000\004\043\221\001\001\000\022\023\225\025" +
    "\063\026\071\027\300\030\155\031\160\032\277\033\065" +
    "\001\001\000\022\023\225\025\063\026\071\027\275\030" +
    "\274\031\276\032\273\033\065\001\001\000\012\023\225" +
    "\026\071\030\271\032\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\035\267\037\270\043\266\001\001" +
    "\000\006\035\227\037\226\001\001\000\004\043\221\001" +
    "\001\000\004\035\212\001\001\000\010\035\267\037\270" +
    "\043\266\001\001\000\004\043\221\001\001\000\034\007" +
    "\302\023\067\025\063\026\071\027\045\030\066\031\056" +
    "\032\044\033\065\044\060\045\047\046\050\050\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PostfixOperator ::= SETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PostfixOperator",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PostfixOperator ::= PONTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PostfixOperator",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // UnaryOperator ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryOperator",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // UnaryOperator ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryOperator",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // MultiplyOperator ::= DIVIDIR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplyOperator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // MultiplyOperator ::= VEZES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplyOperator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // AddOperator ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AddOperator",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // AddOperator ::= MAIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AddOperator",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // RelationalOperator ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // RelationalOperator ::= MENORQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // RelationalOperator ::= MAIORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // RelationalOperator ::= MAIORQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EqualityOperator ::= DIFF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EqualityOperator",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EqualityOperator ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EqualityOperator",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CollectionKind ::= COLLECTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionKind",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CollectionKind ::= SEQUENCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionKind",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CollectionKind ::= BAG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionKind",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CollectionKind ::= SET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionKind",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LogicalOperator ::= XOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalOperator",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LogicalOperator ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalOperator",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LogicalOperator ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalOperator",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CollectionItems ::= OCLExpression VIRGULA CollectionItems 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionItems",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CollectionItems ::= OCLExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionItems",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LiteralCollection ::= CollectionKind LCHAVE RCHAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LiteralCollection",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LiteralCollection ::= CollectionKind LCHAVE CollectionItems RCHAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LiteralCollection",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BoolValue ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolValue",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BoolValue ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolValue",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Number ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Number",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Number ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Number",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OCLLiteral ::= BoolValue 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLLiteral",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OCLLiteral ::= Number 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLLiteral",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OCLLiteral ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLLiteral",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TypeIdentifier ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeIdentifier",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PathName ::= ID PONTO PathName 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PathName",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PathName ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PathName",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SimpleTypeSpecifier ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeSpecifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SimpleTypeSpecifier ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeSpecifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SimpleTypeSpecifier ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeSpecifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SimpleTypeSpecifier ::= REALTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeSpecifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SimpleTypeSpecifier ::= INTTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeSpecifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SimpleTypeSpecifier ::= PathName 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeSpecifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CollectionType ::= CollectionKind LPAREN SimpleTypeSpecifier RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionType",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TypeSpecifier ::= SimpleTypeSpecifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TypeSpecifier ::= CollectionType 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CollectionParameters ::= PathName VIRGULA CollectionParameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionParameters",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CollectionParameters ::= PathName 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionParameters",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SizeOperation ::= SIZE LPAREN RPAREN EqualityOperator NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SizeOperation",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SizeOperation ::= SIZE LPAREN RPAREN RelationalOperator NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SizeOperation",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SizeOperation ::= SIZE LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SizeOperation",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ForAllOperation ::= FORALL OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForAllOperation",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ForAllOperation ::= FORALL LPAREN CollectionParameters BARRA OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForAllOperation",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ForAllOperation ::= FORALL LPAREN CollectionParameters DOISPONTOS TypeSpecifier BARRA OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForAllOperation",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ExcludingOperation ::= EXCLUDING LPAREN ID RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExcludingOperation",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IncludingOperation ::= INCLUDING LPAREN ID RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IncludingOperation",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExistsOperation ::= EXISTS OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExistsOperation",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ExistsOperation ::= EXISTS LPAREN CollectionParameters BARRA OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExistsOperation",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ExistsOperation ::= EXISTS LPAREN CollectionParameters DOISPONTOS TypeSpecifier BARRA OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExistsOperation",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SelectOperation ::= SELECT LPAREN PathName BARRA OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SelectOperation",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SelectOperation ::= SELECT LPAREN OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SelectOperation",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CollectionOperations ::= SizeOperation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionOperations",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CollectionOperations ::= ForAllOperation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionOperations",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CollectionOperations ::= ExcludingOperation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionOperations",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CollectionOperations ::= IncludingOperation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionOperations",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CollectionOperations ::= ExistsOperation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionOperations",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CollectionOperations ::= SelectOperation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionOperations",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CollectionExpression ::= PathName SETA CollectionOperations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionExpression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IfExpression ::= IF LogicalExpression THEN LogicalExpression ELSE LogicalExpression ENDIF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfExpression",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ImpliesExpression ::= LogicalExpression IMPLIES LogicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImpliesExpression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ConditionalExpression ::= IfExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionalExpression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ConditionalExpression ::= ImpliesExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionalExpression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PropertyCallExpression ::= PropertyCall EqualityOperator StringExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PropertyCallExpression ::= PropertyCall EqualityOperator NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PropertyCallExpression ::= PropertyCall RelationalOperator NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PropertyCallExpression ::= PropertyCall EqualityOperator LogicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PropertyCallExpression ::= PropertyCall LogicalOperator LogicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PropertyCallExpression ::= PropertyCall EqualityOperator PropertyCall 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PropertyCallExpression ::= PropertyCall RelationalOperator PropertyCall 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PropertyCallExpression ::= PropertyCall LogicalOperator PropertyCall 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PropertyCall ::= PathName 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCall",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PropertyCall ::= PathName LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCall",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PropertyCall ::= PathName LPAREN FormalParameters RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCall",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // StringExpression ::= STRING EqualityOperator STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StringExpression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NumberExpression ::= Number MultiplyOperator NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumberExpression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NumberExpression ::= Number AddOperator NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumberExpression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NumberExpression ::= Number 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumberExpression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LogicalExpression ::= PropertyCallExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LogicalExpression ::= BoolValue 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LogicalExpression ::= StringExpression EqualityOperator StringExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LogicalExpression ::= NumberExpression EqualityOperator NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LogicalExpression ::= NumberExpression RelationalOperator NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LogicalExpression ::= NOT LogicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LogicalExpression ::= LogicalExpression LogicalOperator LogicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LogicalExpression ::= LPAREN LogicalExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OCLExpression ::= CollectionExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLExpression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OCLExpression ::= ConditionalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLExpression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OCLExpression ::= StringExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLExpression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OCLExpression ::= NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLExpression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OCLExpression ::= LogicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLExpression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Stereotype ::= INV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stereotype",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Stereotype ::= POS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stereotype",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Stereotype ::= PRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stereotype",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FormalParameter ::= ID DOISPONTOS TypeIdentifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameter",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FormalParameters ::= FormalParameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FormalParameters ::= FormalParameters VIRGULA FormalParameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OperationName ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperationName",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ClassifierContext ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassifierContext",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ClassifierContext ::= ID DOISPONTOS ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassifierContext",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ReturnType ::= TypeIdentifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnType",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OperationContext ::= ID QUATROPONTOS OperationName LPAREN FormalParameters RPAREN DOISPONTOS ReturnType 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperationContext",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OperationContext ::= ID QUATROPONTOS OperationName LPAREN FormalParameters RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperationContext",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OperationContext ::= ID QUATROPONTOS OperationName LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperationContext",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ContextBody ::= Stereotype ID DOISPONTOS OCLExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContextBody",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ContextBody ::= Stereotype DOISPONTOS OCLExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContextBody",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ContextDeclaration ::= CONTEXT ClassifierContext 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContextDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ContextDeclaration ::= CONTEXT OperationContext 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContextDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Constraint ::= ContextDeclaration ContextBody 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constraint",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // OCLConstraints ::= Constraint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLConstraints",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // OCLConstraints ::= Constraint OCLConstraints 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLConstraints",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= OCLConstraints EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

