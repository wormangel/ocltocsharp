
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 25 09:13:50 GMT-03:00 2010
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 25 09:13:50 GMT-03:00 2010
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\004\004\000\002\004\004" +
    "\000\002\005\003\000\002\005\003\000\002\033\005\000" +
    "\002\033\006\000\002\034\005\000\002\034\006\000\002" +
    "\034\010\000\002\034\012\000\002\010\007\000\002\010" +
    "\010\000\002\010\012\000\002\011\005\000\002\011\003" +
    "\000\002\012\003\000\002\013\005\000\002\013\003\000" +
    "\002\015\005\000\002\015\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\007\005\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\026\005\000\002\026\004\000" +
    "\002\026\003\000\002\026\003\000\002\027\003\000\002" +
    "\027\005\000\002\027\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\031\006\000\002\031\005\000\002\031\003\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\006\000\002\046\003" +
    "\000\002\046\003\000\002\050\005\000\002\047\011\000" +
    "\002\052\005\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\055\006\000\002\055\010\000\002\055\010" +
    "\000\002\055\012\000\002\056\012\000\002\056\010\000" +
    "\002\056\005\000\002\057\006\000\002\057\010\000\002" +
    "\060\006\000\002\060\010\000\002\061\012\000\002\061" +
    "\010\000\002\061\005\000\002\062\003\000\002\062\005" +
    "\000\002\062\005\000\002\062\005\000\002\062\005\000" +
    "\002\063\003\000\002\063\005\000\002\016\003\000\002" +
    "\016\003\000\002\017\006\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\022\003\000\002\022\005\000" +
    "\002\025\003\000\002\025\003\000\002\024\003\000\002" +
    "\024\003\000\002\053\006\000\002\053\005\000\002\051" +
    "\003\000\002\051\005\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\037\003\000\002" +
    "\037\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\044\003\000\002\044\003" +
    "\000\002\036\003\000\002\036\003\000\002\042\003\000" +
    "\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\004\024\007\001\002\000\004\002\334\001" +
    "\002\000\006\002\uffff\024\007\001\002\000\006\004\053" +
    "\006\055\001\002\000\004\056\010\001\002\000\012\004" +
    "\uffef\006\uffef\033\014\034\013\001\002\000\006\004\ufffc" +
    "\006\ufffc\001\002\000\006\004\ufffd\006\ufffd\001\002\000" +
    "\004\056\016\001\002\000\004\056\015\001\002\000\006" +
    "\004\ufff0\006\ufff0\001\002\000\004\025\uffee\001\002\000" +
    "\004\025\020\001\002\000\006\026\022\056\021\001\002" +
    "\000\014\025\uff9f\026\uff9f\033\051\035\uff9f\046\047\001" +
    "\002\000\006\004\ufff3\006\ufff3\001\002\000\006\026\uffec" +
    "\035\uffec\001\002\000\006\026\035\035\033\001\002\000" +
    "\006\026\uffea\035\uffea\001\002\000\050\002\uffd2\005\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\024\uffd2\025\027\026\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\073\uffd2\074\uffd2\075\uffd2\077\uffd2\001\002\000\006\026" +
    "\030\056\021\001\002\000\046\002\uffd3\005\uffd3\013\uffd3" +
    "\014\uffd3\015\uffd3\024\uffd3\026\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\073\uffd3\074\uffd3" +
    "\075\uffd3\077\uffd3\001\002\000\006\026\032\035\033\001" +
    "\002\000\046\002\uffd4\005\uffd4\013\uffd4\014\uffd4\015\uffd4" +
    "\024\uffd4\026\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\042\uffd4\043\uffd4\073\uffd4\074\uffd4\075\uffd4\077\uffd4" +
    "\001\002\000\004\056\021\001\002\000\006\026\uffed\035" +
    "\uffed\001\002\000\010\004\ufff2\006\ufff2\033\036\001\002" +
    "\000\016\056\037\057\040\070\045\072\046\100\044\101" +
    "\042\001\002\000\064\002\uff9f\004\uff9f\005\uff9f\006\uff9f" +
    "\013\uff9f\014\uff9f\015\uff9f\024\uff9f\025\uff9f\026\uff9f\033" +
    "\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f" +
    "\043\uff9f\044\uff9f\046\047\051\uff9f\073\uff9f\074\uff9f\075" +
    "\uff9f\077\uff9f\001\002\000\014\004\uffa1\006\uffa1\026\uffa1" +
    "\035\uffa1\051\uffa1\001\002\000\006\004\ufff1\006\ufff1\001" +
    "\002\000\014\004\uffa3\006\uffa3\026\uffa3\035\uffa3\051\uffa3" +
    "\001\002\000\014\004\uffa5\006\uffa5\026\uffa5\035\uffa5\051" +
    "\uffa5\001\002\000\014\004\uffa4\006\uffa4\026\uffa4\035\uffa4" +
    "\051\uffa4\001\002\000\014\004\uffa2\006\uffa2\026\uffa2\035" +
    "\uffa2\051\uffa2\001\002\000\014\004\uffa0\006\uffa0\026\uffa0" +
    "\035\uffa0\051\uffa0\001\002\000\004\056\037\001\002\000" +
    "\062\002\uff9e\004\uff9e\005\uff9e\006\uff9e\013\uff9e\014\uff9e" +
    "\015\uff9e\024\uff9e\025\uff9e\026\uff9e\033\uff9e\035\uff9e\036" +
    "\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e" +
    "\051\uff9e\073\uff9e\074\uff9e\075\uff9e\077\uff9e\001\002\000" +
    "\016\056\037\057\040\070\045\072\046\100\044\101\042" +
    "\001\002\000\006\026\uffeb\035\uffeb\001\002\000\006\033" +
    "\320\056\317\001\002\000\006\002\ufffa\024\ufffa\001\002" +
    "\000\006\033\061\056\060\001\002\000\006\002\ufffb\024" +
    "\ufffb\001\002\000\006\002\ufffe\024\ufffe\001\002\000\004" +
    "\033\315\001\002\000\026\012\071\021\066\025\072\056" +
    "\037\057\073\061\070\062\100\067\103\071\106\076\064" +
    "\001\002\000\024\036\141\037\137\040\140\041\142\042" +
    "\136\043\143\073\256\074\261\075\260\001\002\000\034" +
    "\002\uffe5\005\uffe5\013\uffe5\014\uffe5\015\300\024\uffe5\026" +
    "\uffe5\036\uffe5\037\uffe5\073\256\074\261\075\260\077\uffe5" +
    "\001\002\000\026\012\071\021\066\025\072\056\037\057" +
    "\073\061\070\062\100\067\103\071\106\076\064\001\002" +
    "\000\034\002\uffc7\005\uffc7\013\uffc7\014\uffc7\015\uffc7\024" +
    "\uffc7\026\uffc7\036\uffc7\037\uffc7\073\uffc7\074\uffc7\075\uffc7" +
    "\077\uffc7\001\002\000\004\056\037\001\002\000\034\002" +
    "\uffc8\005\uffc8\013\uffc8\014\uffc8\015\uffc8\024\uffc8\026\uffc8" +
    "\036\uffc8\037\uffc8\073\uffc8\074\uffc8\075\uffc8\077\uffc8\001" +
    "\002\000\034\002\uff9b\005\uff9b\013\uff9b\014\uff9b\015\uff9b" +
    "\024\uff9b\026\uff9b\036\uff9b\037\uff9b\073\uff9b\074\uff9b\075" +
    "\uff9b\077\uff9b\001\002\000\014\021\066\056\037\061\070" +
    "\062\100\076\064\001\002\000\026\012\071\021\066\025" +
    "\072\056\037\057\073\061\070\062\100\067\103\071\106" +
    "\076\064\001\002\000\006\036\141\037\137\001\002\000" +
    "\034\002\uffe2\005\uffe2\013\uffe2\014\uffe2\015\uffe2\024\uffe2" +
    "\026\uffe2\036\uffe2\037\uffe2\073\uffe2\074\uffe2\075\uffe2\077" +
    "\uffe2\001\002\000\034\002\uffe1\005\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\024\uffe1\026\uffe1\036\uffe1\037\uffe1\073\uffe1\074" +
    "\uffe1\075\uffe1\077\uffe1\001\002\000\006\002\ufff9\024\ufff9" +
    "\001\002\000\034\002\uffe3\005\uffe3\013\uffe3\014\uffe3\015" +
    "\uffe3\024\uffe3\026\uffe3\036\uffe3\037\uffe3\073\uffe3\074\uffe3" +
    "\075\uffe3\077\uffe3\001\002\000\034\002\uff9a\005\uff9a\013" +
    "\uff9a\014\uff9a\015\uff9a\024\uff9a\026\uff9a\036\uff9a\037\uff9a" +
    "\073\uff9a\074\uff9a\075\uff9a\077\uff9a\001\002\000\034\002" +
    "\uffde\005\uffde\013\uffde\014\uffde\015\uffde\024\uffde\026\uffde" +
    "\036\uffde\037\uffde\073\uffde\074\uffde\075\uffde\077\uffde\001" +
    "\002\000\034\002\uffdd\005\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\024\uffdd\026\uffdd\036\141\037\137\073\uffdd\074\uffdd\075" +
    "\uffdd\077\uffdd\001\002\000\044\002\uff9d\005\uff9d\013\uff9d" +
    "\014\uff9d\015\uff9d\024\uff9d\026\uff9d\036\uff9d\037\uff9d\052" +
    "\uff9d\053\uff9d\054\uff9d\055\uff9d\073\uff9d\074\uff9d\075\uff9d" +
    "\077\uff9d\001\002\000\034\002\uffe4\005\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\024\uffe4\026\uffe4\036\141\037\137\073\uffe4" +
    "\074\uffe4\075\uffe4\077\uffe4\001\002\000\030\025\027\036" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\120" +
    "\073\uffd2\074\uffd2\075\uffd2\001\002\000\044\002\uff9c\005" +
    "\uff9c\013\uff9c\014\uff9c\015\uff9c\024\uff9c\026\uff9c\036\uff9c" +
    "\037\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\073\uff9c\074" +
    "\uff9c\075\uff9c\077\uff9c\001\002\000\044\002\uffdc\005\uffdc" +
    "\013\uffdc\014\uffdc\015\uffdc\024\uffdc\026\uffdc\036\uffdc\037" +
    "\uffdc\052\110\053\114\054\112\055\111\073\uffdc\074\uffdc" +
    "\075\uffdc\077\uffdc\001\002\000\006\067\uff88\071\uff88\001" +
    "\002\000\006\067\uff85\071\uff85\001\002\000\006\067\uff86" +
    "\071\uff86\001\002\000\006\067\103\071\106\001\002\000" +
    "\006\067\uff87\071\uff87\001\002\000\006\067\103\071\106" +
    "\001\002\000\034\002\uffda\005\uffda\013\uffda\014\uffda\015" +
    "\uffda\024\uffda\026\uffda\036\uffda\037\uffda\073\uffda\074\uffda" +
    "\075\uffda\077\uffda\001\002\000\034\002\uffdb\005\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\024\uffdb\026\uffdb\036\uffdb\037\uffdb" +
    "\073\uffdb\074\uffdb\075\uffdb\077\uffdb\001\002\000\016\007" +
    "\131\010\126\011\125\016\130\017\124\023\135\001\002" +
    "\000\034\002\uffc1\005\uffc1\013\uffc1\014\uffc1\015\uffc1\024" +
    "\uffc1\026\uffc1\036\uffc1\037\uffc1\073\uffc1\074\uffc1\075\uffc1" +
    "\077\uffc1\001\002\000\034\002\uffc3\005\uffc3\013\uffc3\014" +
    "\uffc3\015\uffc3\024\uffc3\026\uffc3\036\uffc3\037\uffc3\073\uffc3" +
    "\074\uffc3\075\uffc3\077\uffc3\001\002\000\034\002\uffc0\005" +
    "\uffc0\013\uffc0\014\uffc0\015\uffc0\024\uffc0\026\uffc0\036\uffc0" +
    "\037\uffc0\073\uffc0\074\uffc0\075\uffc0\077\uffc0\001\002\000" +
    "\004\025\243\001\002\000\026\012\071\021\066\025\227" +
    "\056\037\057\073\061\070\062\100\067\103\071\106\076" +
    "\064\001\002\000\026\012\071\021\066\025\173\056\037" +
    "\057\073\061\070\062\100\067\103\071\106\076\064\001" +
    "\002\000\034\002\uffbf\005\uffbf\013\uffbf\014\uffbf\015\uffbf" +
    "\024\uffbf\026\uffbf\036\uffbf\037\uffbf\073\uffbf\074\uffbf\075" +
    "\uffbf\077\uffbf\001\002\000\004\025\166\001\002\000\004" +
    "\025\152\001\002\000\034\002\uffc2\005\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\024\uffc2\026\uffc2\036\uffc2\037\uffc2\073\uffc2" +
    "\074\uffc2\075\uffc2\077\uffc2\001\002\000\034\002\uffc4\005" +
    "\uffc4\013\uffc4\014\uffc4\015\uffc4\024\uffc4\026\uffc4\036\uffc4" +
    "\037\uffc4\073\uffc4\074\uffc4\075\uffc4\077\uffc4\001\002\000" +
    "\034\002\uffbe\005\uffbe\013\uffbe\014\uffbe\015\uffbe\024\uffbe" +
    "\026\uffbe\036\uffbe\037\uffbe\073\uffbe\074\uffbe\075\uffbe\077" +
    "\uffbe\001\002\000\044\002\uffaf\005\uffaf\013\uffaf\014\uffaf" +
    "\015\uffaf\024\uffaf\026\uffaf\036\141\037\137\040\140\041" +
    "\142\042\136\043\143\073\uffaf\074\uffaf\075\uffaf\077\uffaf" +
    "\001\002\000\010\056\uff89\067\uff89\071\uff89\001\002\000" +
    "\026\012\uff8d\021\uff8d\025\uff8d\056\uff8d\057\uff8d\061\uff8d" +
    "\062\uff8d\067\uff8d\071\uff8d\076\uff8d\001\002\000\010\056" +
    "\uff8a\067\uff8a\071\uff8a\001\002\000\026\012\uff8e\021\uff8e" +
    "\025\uff8e\056\uff8e\057\uff8e\061\uff8e\062\uff8e\067\uff8e\071" +
    "\uff8e\076\uff8e\001\002\000\010\056\uff8c\067\uff8c\071\uff8c" +
    "\001\002\000\010\056\uff8b\067\uff8b\071\uff8b\001\002\000" +
    "\006\067\103\071\106\001\002\000\012\021\066\056\037" +
    "\067\103\071\106\001\002\000\034\002\uffad\005\uffad\013" +
    "\uffad\014\uffad\015\uffad\024\uffad\026\uffad\036\uffad\037\uffad" +
    "\073\uffad\074\uffad\075\uffad\077\uffad\001\002\000\034\002" +
    "\uffac\005\uffac\013\uffac\014\uffac\015\uffac\024\uffac\026\uffac" +
    "\036\uffac\037\uffac\073\uffac\074\uffac\075\uffac\077\uffac\001" +
    "\002\000\034\002\uffab\005\uffab\013\uffab\014\uffab\015\uffab" +
    "\024\uffab\026\uffab\036\uffab\037\uffab\073\uffab\074\uffab\075" +
    "\uffab\077\uffab\001\002\000\034\002\uffae\005\uffae\013\uffae" +
    "\014\uffae\015\uffae\024\uffae\026\uffae\036\uffae\037\uffae\073" +
    "\uffae\074\uffae\075\uffae\077\uffae\001\002\000\026\012\071" +
    "\021\066\025\072\056\037\057\073\061\070\062\100\067" +
    "\103\071\106\076\064\001\002\000\004\026\163\001\002" +
    "\000\032\025\027\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042" +
    "\uffd2\043\uffd2\044\120\051\155\073\uffd2\074\uffd2\075\uffd2" +
    "\001\002\000\026\012\071\021\066\025\072\056\037\057" +
    "\073\061\070\062\100\067\103\071\106\076\064\001\002" +
    "\000\004\026\157\001\002\000\036\002\uffbc\005\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\024\uffbc\026\uffbc\036\uffbc\037\uffbc" +
    "\044\160\073\uffbc\074\uffbc\075\uffbc\077\uffbc\001\002\000" +
    "\004\056\037\001\002\000\004\044\120\001\002\000\034" +
    "\002\uffba\005\uffba\013\uffba\014\uffba\015\uffba\024\uffba\026" +
    "\uffba\036\uffba\037\uffba\073\uffba\074\uffba\075\uffba\077\uffba" +
    "\001\002\000\036\002\uffbd\005\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\024\uffbd\026\uffbd\036\uffbd\037\uffbd\044\164\073\uffbd" +
    "\074\uffbd\075\uffbd\077\uffbd\001\002\000\004\056\037\001" +
    "\002\000\034\002\uffbb\005\uffbb\013\uffbb\014\uffbb\015\uffbb" +
    "\024\uffbb\026\uffbb\036\uffbb\037\uffbb\073\uffbb\074\uffbb\075" +
    "\uffbb\077\uffbb\001\002\000\004\056\167\001\002\000\004" +
    "\026\170\001\002\000\036\002\uffb6\005\uffb6\013\uffb6\014" +
    "\uffb6\015\uffb6\024\uffb6\026\uffb6\036\uffb6\037\uffb6\044\171" +
    "\073\uffb6\074\uffb6\075\uffb6\077\uffb6\001\002\000\004\056" +
    "\037\001\002\000\034\002\uffb5\005\uffb5\013\uffb5\014\uffb5" +
    "\015\uffb5\024\uffb5\026\uffb5\036\uffb5\037\uffb5\073\uffb5\074" +
    "\uffb5\075\uffb5\077\uffb5\001\002\000\026\012\071\021\066" +
    "\025\072\056\037\057\073\061\070\062\100\067\103\071" +
    "\106\076\064\001\002\000\004\026\175\001\002\000\034" +
    "\002\uffb7\005\uffb7\013\uffb7\014\uffb7\015\uffb7\024\uffb7\026" +
    "\uffb7\036\uffb7\037\uffb7\073\uffb7\074\uffb7\075\uffb7\077\uffb7" +
    "\001\002\000\006\033\206\051\205\001\002\000\004\026" +
    "\204\001\002\000\036\025\027\033\uffaa\035\201\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\120\051" +
    "\uffaa\073\uffd2\074\uffd2\075\uffd2\001\002\000\004\056\037" +
    "\001\002\000\006\033\uffa9\051\uffa9\001\002\000\010\033" +
    "\uffaa\035\201\051\uffaa\001\002\000\034\002\uffe6\005\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\024\uffe6\026\uffe6\036\uffe6\037" +
    "\uffe6\073\uffe6\074\uffe6\075\uffe6\077\uffe6\001\002\000\026" +
    "\012\071\021\066\025\072\056\037\057\073\061\070\062" +
    "\100\067\103\071\106\076\064\001\002\000\026\056\037" +
    "\057\040\063\211\064\213\065\212\066\214\070\045\072" +
    "\046\100\044\101\042\001\002\000\004\051\222\001\002" +
    "\000\004\025\217\001\002\000\004\025\uff92\001\002\000" +
    "\004\025\uff90\001\002\000\004\025\uff91\001\002\000\004" +
    "\025\uff8f\001\002\000\004\051\uffa8\001\002\000\004\051" +
    "\uffa7\001\002\000\016\056\037\057\040\070\045\072\046" +
    "\100\044\101\042\001\002\000\004\026\221\001\002\000" +
    "\004\051\uffa6\001\002\000\026\012\071\021\066\025\072" +
    "\056\037\057\073\061\070\062\100\067\103\071\106\076" +
    "\064\001\002\000\004\026\224\001\002\000\034\002\uffb9" +
    "\005\uffb9\013\uffb9\014\uffb9\015\uffb9\024\uffb9\026\uffb9\036" +
    "\uffb9\037\uffb9\073\uffb9\074\uffb9\075\uffb9\077\uffb9\001\002" +
    "\000\004\026\226\001\002\000\034\002\uffb8\005\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\024\uffb8\026\uffb8\036\uffb8\037\uffb8" +
    "\073\uffb8\074\uffb8\075\uffb8\077\uffb8\001\002\000\026\012" +
    "\071\021\066\025\072\056\037\057\073\061\070\062\100" +
    "\067\103\071\106\076\064\001\002\000\004\026\231\001" +
    "\002\000\034\002\uffb0\005\uffb0\013\uffb0\014\uffb0\015\uffb0" +
    "\024\uffb0\026\uffb0\036\uffb0\037\uffb0\073\uffb0\074\uffb0\075" +
    "\uffb0\077\uffb0\001\002\000\006\033\234\051\233\001\002" +
    "\000\026\012\071\021\066\025\072\056\037\057\073\061" +
    "\070\062\100\067\103\071\106\076\064\001\002\000\026" +
    "\056\037\057\040\063\211\064\213\065\212\066\214\070" +
    "\045\072\046\100\044\101\042\001\002\000\004\051\236" +
    "\001\002\000\026\012\071\021\066\025\072\056\037\057" +
    "\073\061\070\062\100\067\103\071\106\076\064\001\002" +
    "\000\004\026\240\001\002\000\034\002\uffb2\005\uffb2\013" +
    "\uffb2\014\uffb2\015\uffb2\024\uffb2\026\uffb2\036\uffb2\037\uffb2" +
    "\073\uffb2\074\uffb2\075\uffb2\077\uffb2\001\002\000\004\026" +
    "\242\001\002\000\034\002\uffb1\005\uffb1\013\uffb1\014\uffb1" +
    "\015\uffb1\024\uffb1\026\uffb1\036\uffb1\037\uffb1\073\uffb1\074" +
    "\uffb1\075\uffb1\077\uffb1\001\002\000\004\056\244\001\002" +
    "\000\004\026\245\001\002\000\036\002\uffb4\005\uffb4\013" +
    "\uffb4\014\uffb4\015\uffb4\024\uffb4\026\uffb4\036\uffb4\037\uffb4" +
    "\044\246\073\uffb4\074\uffb4\075\uffb4\077\uffb4\001\002\000" +
    "\004\056\037\001\002\000\034\002\uffb3\005\uffb3\013\uffb3" +
    "\014\uffb3\015\uffb3\024\uffb3\026\uffb3\036\uffb3\037\uffb3\073" +
    "\uffb3\074\uffb3\075\uffb3\077\uffb3\001\002\000\006\067\103" +
    "\071\106\001\002\000\034\002\uffd8\005\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\024\uffd8\026\uffd8\036\uffd8\037\uffd8\073\uffd8" +
    "\074\uffd8\075\uffd8\077\uffd8\001\002\000\022\021\066\056" +
    "\037\057\073\061\070\062\100\067\103\071\106\076\064" +
    "\001\002\000\034\002\uffd6\005\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\024\uffd6\026\uffd6\036\141\037\137\073\uffd6\074\uffd6" +
    "\075\uffd6\077\uffd6\001\002\000\034\002\uffd5\005\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\024\uffd5\026\uffd5\036\uffd5\037\uffd5" +
    "\073\256\074\261\075\260\077\uffd5\001\002\000\034\002" +
    "\uffd7\005\uffd7\013\uffd7\014\uffd7\015\uffd7\024\uffd7\026\uffd7" +
    "\036\uffd7\037\uffd7\073\uffd7\074\uffd7\075\uffd7\077\uffd7\001" +
    "\002\000\014\021\uff95\056\uff95\061\uff95\062\uff95\076\uff95" +
    "\001\002\000\014\021\066\056\037\061\070\062\100\076" +
    "\064\001\002\000\014\021\uff93\056\uff93\061\uff93\062\uff93" +
    "\076\uff93\001\002\000\014\021\uff94\056\uff94\061\uff94\062" +
    "\uff94\076\uff94\001\002\000\034\002\uffe0\005\uffe0\013\uffe0" +
    "\014\uffe0\015\uffe0\024\uffe0\026\uffe0\036\uffe0\037\uffe0\073" +
    "\256\074\261\075\260\077\uffe0\001\002\000\034\002\uffdd" +
    "\005\uffdd\013\uffdd\014\uffdd\015\uffdd\024\uffdd\026\uffdd\036" +
    "\uffdd\037\uffdd\073\uffdd\074\uffdd\075\uffdd\077\uffdd\001\002" +
    "\000\004\057\265\001\002\000\034\002\uffd9\005\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\024\uffd9\026\uffd9\036\uffd9\037\uffd9" +
    "\073\uffd9\074\uffd9\075\uffd9\077\uffd9\001\002\000\012\013" +
    "\267\073\256\074\261\075\260\001\002\000\014\021\066" +
    "\056\037\061\070\062\100\076\064\001\002\000\012\014" +
    "\271\073\256\074\261\075\260\001\002\000\014\021\066" +
    "\056\037\061\070\062\100\076\064\001\002\000\012\073" +
    "\256\074\261\075\260\077\273\001\002\000\034\002\uffc5" +
    "\005\uffc5\013\uffc5\014\uffc5\015\uffc5\024\uffc5\026\uffc5\036" +
    "\uffc5\037\uffc5\073\uffc5\074\uffc5\075\uffc5\077\uffc5\001\002" +
    "\000\006\036\141\037\137\001\002\000\026\012\071\021" +
    "\066\025\072\056\037\057\073\061\070\062\100\067\103" +
    "\071\106\076\064\001\002\000\034\002\uffc9\005\uffc9\013" +
    "\uffc9\014\uffc9\015\uffc9\024\uffc9\026\uffc9\036\uffc9\037\uffc9" +
    "\073\uffc9\074\uffc9\075\uffc9\077\uffc9\001\002\000\034\002" +
    "\uffdf\005\uffdf\013\uffdf\014\uffdf\015\uffdf\024\uffdf\026\uffdf" +
    "\036\uffdf\037\uffdf\073\uffdf\074\uffdf\075\uffdf\077\uffdf\001" +
    "\002\000\014\021\066\056\037\061\070\062\100\076\064" +
    "\001\002\000\034\002\uffc6\005\uffc6\013\uffc6\014\uffc6\015" +
    "\uffc6\024\uffc6\026\uffc6\036\uffc6\037\uffc6\073\256\074\261" +
    "\075\260\077\uffc6\001\002\000\014\021\066\056\037\061" +
    "\070\062\100\076\064\001\002\000\020\021\066\056\037" +
    "\061\070\062\100\067\103\071\106\076\064\001\002\000" +
    "\010\056\037\067\103\071\106\001\002\000\034\002\uffcc" +
    "\005\uffcc\013\uffcc\014\uffcc\015\uffcc\024\uffcc\026\uffcc\036" +
    "\uffcc\037\uffcc\073\uffcc\074\uffcc\075\uffcc\077\uffcc\001\002" +
    "\000\034\002\uffd0\005\uffd0\013\uffd0\014\uffd0\015\uffd0\024" +
    "\uffd0\026\uffd0\036\uffd0\037\uffd0\073\uffd0\074\uffd0\075\uffd0" +
    "\077\uffd0\001\002\000\034\002\uffcb\005\uffcb\013\uffcb\014" +
    "\uffcb\015\uffcb\024\uffcb\026\uffcb\036\uffcb\037\uffcb\073\uffcb" +
    "\074\uffcb\075\uffcb\077\uffcb\001\002\000\044\002\uffcf\005" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\024\uffcf\026\uffcf\036\141" +
    "\037\137\040\140\041\142\042\136\043\143\073\256\074" +
    "\261\075\260\077\uffcf\001\002\000\034\002\uffcd\005\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\024\uffcd\026\uffcd\036\uffcd\037" +
    "\uffcd\073\256\074\261\075\260\077\uffcd\001\002\000\034" +
    "\002\uffca\005\uffca\013\uffca\014\uffca\015\uffca\024\uffca\026" +
    "\uffca\036\uffca\037\uffca\073\uffca\074\uffca\075\uffca\077\uffca" +
    "\001\002\000\044\002\uffd1\005\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\024\uffd1\026\uffd1\036\141\037\137\040\140\041\142" +
    "\042\136\043\143\073\256\074\261\075\260\077\uffd1\001" +
    "\002\000\034\002\uffce\005\uffce\013\uffce\014\uffce\015\uffce" +
    "\024\uffce\026\uffce\036\uffce\037\uffce\073\256\074\261\075" +
    "\260\077\uffce\001\002\000\026\012\071\021\066\025\072" +
    "\056\037\057\073\061\070\062\100\067\103\071\106\076" +
    "\064\001\002\000\006\002\ufff8\024\ufff8\001\002\000\004" +
    "\033\325\001\002\000\026\012\071\021\066\025\072\056" +
    "\037\057\073\061\070\062\100\067\103\071\106\076\064" +
    "\001\002\000\010\002\ufff7\005\322\024\ufff7\001\002\000" +
    "\004\033\323\001\002\000\026\012\071\021\066\025\072" +
    "\056\037\057\073\061\070\062\100\067\103\071\106\076" +
    "\064\001\002\000\006\002\ufff5\024\ufff5\001\002\000\026" +
    "\012\071\021\066\025\072\056\037\057\073\061\070\062" +
    "\100\067\103\071\106\076\064\001\002\000\010\002\ufff6" +
    "\005\327\024\ufff6\001\002\000\004\056\330\001\002\000" +
    "\004\033\331\001\002\000\026\012\071\021\066\025\072" +
    "\056\037\057\073\061\070\062\100\067\103\071\106\076" +
    "\064\001\002\000\006\002\ufff4\024\ufff4\001\002\000\004" +
    "\002\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\010\002\003\003\004\004\005\001\001\000" +
    "\002\001\001\000\010\002\332\003\004\004\005\001\001" +
    "\000\010\005\056\033\055\034\053\001\001\000\006\010" +
    "\011\011\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\023\015\022\022\025\031\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\030\015\022\022\025\031\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\033\022" +
    "\025\031\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\040\022\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\047\001\001\000\002\001\001\000\006" +
    "\021\051\022\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\007\075\022" +
    "\104\024\100\025\106\026\062\027\103\031\061\032\101" +
    "\035\076\046\073\047\064\050\066\052\074\001\001\000" +
    "\010\037\302\041\303\045\301\001\001\000\004\045\256" +
    "\001\001\000\034\007\276\022\104\024\100\025\106\026" +
    "\062\027\103\031\061\032\101\035\076\046\073\047\064" +
    "\050\066\052\074\001\001\000\002\001\001\000\006\022" +
    "\025\031\273\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\022\025\024\100\026\265\031\061\032\262\001" +
    "\001\000\034\007\176\022\104\024\100\025\106\026\062" +
    "\027\103\031\061\032\101\035\076\046\073\047\064\050" +
    "\066\052\074\001\001\000\004\037\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\251" +
    "\001\001\000\002\001\001\000\004\037\247\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\036\114\044\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\106\027\116\001\001\000\002\001\001" +
    "\000\006\025\106\027\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\054\132\055\121\056\131\057\120" +
    "\060\122\061\126\062\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\007\227\022\104\024\100\025\106\026\062\027\103\031" +
    "\061\032\101\035\076\046\073\047\064\050\066\052\074" +
    "\001\001\000\034\007\173\022\104\024\100\025\106\026" +
    "\062\027\103\031\061\032\101\035\076\046\073\047\064" +
    "\050\066\052\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\037\144\041\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\106\027\150\001\001\000\016\022\104\025\106\027\145" +
    "\031\061\032\146\052\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\007\152\022\153\024\100\025\106\026\062\027\103\031" +
    "\061\032\101\035\076\046\073\047\064\050\066\052\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\007" +
    "\155\022\104\024\100\025\106\026\062\027\103\031\061" +
    "\032\101\035\076\046\073\047\064\050\066\052\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\160" +
    "\052\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\160\052\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\160\052\171\001\001\000\002\001\001" +
    "\000\036\007\176\022\177\024\100\025\106\026\062\027" +
    "\103\031\061\032\101\035\076\046\073\047\064\050\066" +
    "\052\074\063\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\202\063\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\007\224\022\104" +
    "\024\100\025\106\026\062\027\103\031\061\032\101\035" +
    "\076\046\073\047\064\050\066\052\074\001\001\000\014" +
    "\016\206\017\214\020\207\021\215\022\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\217\022\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\007\222\022" +
    "\104\024\100\025\106\026\062\027\103\031\061\032\101" +
    "\035\076\046\073\047\064\050\066\052\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\007\176\022\177\024\100\025\106\026" +
    "\062\027\103\031\061\032\101\035\076\046\073\047\064" +
    "\050\066\052\074\063\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\007\240\022\104" +
    "\024\100\025\106\026\062\027\103\031\061\032\101\035" +
    "\076\046\073\047\064\050\066\052\074\001\001\000\014" +
    "\016\234\017\214\020\207\021\215\022\042\001\001\000" +
    "\002\001\001\000\034\007\236\022\104\024\100\025\106" +
    "\026\062\027\103\031\061\032\101\035\076\046\073\047" +
    "\064\050\066\052\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\160" +
    "\052\246\001\001\000\002\001\001\000\006\025\106\027" +
    "\250\001\001\000\002\001\001\000\022\022\025\024\100" +
    "\025\106\026\253\027\252\031\061\032\101\035\254\001" +
    "\001\000\004\037\247\001\001\000\004\045\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\022\025\024" +
    "\100\026\261\031\061\032\262\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\256" +
    "\001\001\000\014\022\025\024\100\026\267\031\061\032" +
    "\262\001\001\000\004\045\256\001\001\000\014\022\025" +
    "\024\100\026\271\031\061\032\262\001\001\000\004\045" +
    "\256\001\001\000\002\001\001\000\004\037\274\001\001" +
    "\000\034\007\275\022\104\024\100\025\106\026\062\027" +
    "\103\031\061\032\101\035\076\046\073\047\064\050\066" +
    "\052\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\022\025\024\100\026\300\031\061\032\262\001\001" +
    "\000\004\045\256\001\001\000\014\022\025\024\100\026" +
    "\313\031\312\032\262\001\001\000\022\022\025\024\100" +
    "\025\106\026\310\027\306\030\311\031\307\032\262\001" +
    "\001\000\012\022\025\025\106\027\304\031\305\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\037\302\041\303\045\301\001\001\000\004\045\256" +
    "\001\001\000\002\001\001\000\010\037\302\041\303\045" +
    "\301\001\001\000\004\045\256\001\001\000\034\007\315" +
    "\022\104\024\100\025\106\026\062\027\103\031\061\032" +
    "\101\035\076\046\073\047\064\050\066\052\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\007\320\022" +
    "\104\024\100\025\106\026\062\027\103\031\061\032\101" +
    "\035\076\046\073\047\064\050\066\052\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\007\323\022\104" +
    "\024\100\025\106\026\062\027\103\031\061\032\101\035" +
    "\076\046\073\047\064\050\066\052\074\001\001\000\002" +
    "\001\001\000\034\007\325\022\104\024\100\025\106\026" +
    "\062\027\103\031\061\032\101\035\076\046\073\047\064" +
    "\050\066\052\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\007\331\022\104\024\100" +
    "\025\106\026\062\027\103\031\061\032\101\035\076\046" +
    "\073\047\064\050\066\052\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // UnaryOperator ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryOperator",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // UnaryOperator ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryOperator",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // MultiplyOperator ::= DIVIDIR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplyOperator",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // MultiplyOperator ::= VEZES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplyOperator",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // AddOperator ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AddOperator",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // AddOperator ::= MAIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AddOperator",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // RelationalOperator ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // RelationalOperator ::= MENORQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // RelationalOperator ::= MAIORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // RelationalOperator ::= MAIORQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EqualityOperator ::= DIFF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EqualityOperator",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EqualityOperator ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EqualityOperator",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CollectionKind ::= COLLECTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionKind",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CollectionKind ::= SEQUENCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionKind",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CollectionKind ::= BAG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionKind",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CollectionKind ::= SET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionKind",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LogicalOperator ::= XOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalOperator",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LogicalOperator ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalOperator",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LogicalOperator ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalOperator",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CollectionItems ::= OCLExpression VIRGULA CollectionItems 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionItems",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CollectionItems ::= OCLExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionItems",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LiteralCollection ::= CollectionKind LCHAVE RCHAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LiteralCollection",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LiteralCollection ::= CollectionKind LCHAVE CollectionItems RCHAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LiteralCollection",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // BoolValue ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolValue",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // BoolValue ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolValue",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Number ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Number",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Number ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Number",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PathName ::= ID PONTO PathName 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PathName",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PathName ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PathName",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SimpleTypeSpecifier ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeSpecifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SimpleTypeSpecifier ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeSpecifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SimpleTypeSpecifier ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeSpecifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SimpleTypeSpecifier ::= REALTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeSpecifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SimpleTypeSpecifier ::= INTTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeSpecifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SimpleTypeSpecifier ::= PathName 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeSpecifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CollectionType ::= CollectionKind LPAREN SimpleTypeSpecifier RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionType",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TypeSpecifier ::= SimpleTypeSpecifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TypeSpecifier ::= CollectionType 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CollectionParameters ::= PathName VIRGULA CollectionParameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionParameters",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CollectionParameters ::= PathName 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionParameters",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SizeOperation ::= SIZE EqualityOperator CollectionExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SizeOperation",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SizeOperation ::= SIZE EqualityOperator PropertyCallExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SizeOperation",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SizeOperation ::= SIZE EqualityOperator NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SizeOperation",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SizeOperation ::= SIZE RelationalOperator NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SizeOperation",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SizeOperation ::= SIZE 
            {
              Object RESULT =null;
		 System.out.println("to no SIZE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SizeOperation",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ForAllOperation ::= FORALL OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForAllOperation",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ForAllOperation ::= FORALL LPAREN CollectionParameters BARRA OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForAllOperation",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ForAllOperation ::= FORALL LPAREN CollectionParameters DOISPONTOS TypeSpecifier BARRA OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForAllOperation",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ExcludingOperation ::= EXCLUDING LPAREN ID RPAREN SETA CollectionExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExcludingOperation",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ExcludingOperation ::= EXCLUDING LPAREN ID RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExcludingOperation",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IncludingOperation ::= INCLUDING LPAREN ID RPAREN SETA CollectionExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IncludingOperation",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IncludingOperation ::= INCLUDING LPAREN ID RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IncludingOperation",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ExistsOperation ::= EXISTS OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExistsOperation",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ExistsOperation ::= EXISTS LPAREN CollectionParameters BARRA OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExistsOperation",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ExistsOperation ::= EXISTS LPAREN CollectionParameters DOISPONTOS TypeSpecifier BARRA OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExistsOperation",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SelectOperation ::= SELECT LPAREN PathName BARRA OCLExpression RPAREN SETA CollectionExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SelectOperation",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SelectOperation ::= SELECT LPAREN OCLExpression RPAREN SETA CollectionExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SelectOperation",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SelectOperation ::= SELECT LPAREN PathName BARRA OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SelectOperation",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SelectOperation ::= SELECT LPAREN OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SelectOperation",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CollectionOperations ::= SizeOperation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionOperations",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CollectionOperations ::= ForAllOperation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionOperations",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CollectionOperations ::= ExcludingOperation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionOperations",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CollectionOperations ::= IncludingOperation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionOperations",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CollectionOperations ::= ExistsOperation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionOperations",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CollectionOperations ::= SelectOperation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionOperations",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CollectionExpression ::= PathName SETA CollectionOperations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionExpression",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IfExpression ::= IF LogicalExpression THEN LogicalExpression ELSE LogicalExpression ENDIF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfExpression",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ImpliesExpression ::= LogicalExpression IMPLIES LogicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImpliesExpression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ConditionalExpression ::= IfExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionalExpression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ConditionalExpression ::= ImpliesExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionalExpression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PropertyCallExpression ::= ATPRE PropertyCall EqualityOperator OCLExpression 
            {
              Object RESULT =null;
		 System.out.println("to no @pre"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PropertyCallExpression ::= PropertyCall EqualityOperator StringExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PropertyCallExpression ::= PropertyCall EqualityOperator NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PropertyCallExpression ::= PropertyCall RelationalOperator NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PropertyCallExpression ::= PropertyCall EqualityOperator LogicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PropertyCallExpression ::= PropertyCall LogicalOperator LogicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PropertyCallExpression ::= PropertyCall EqualityOperator PropertyCall 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PropertyCallExpression ::= PropertyCall RelationalOperator PropertyCall 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PropertyCallExpression ::= PropertyCall LogicalOperator PropertyCall 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PropertyCall ::= PathName 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCall",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PropertyCall ::= PathName LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCall",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PropertyCall ::= PathName LPAREN FormalParameters RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCall",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EqualityExpression ::= PropertyCallExpression EqualityOperator LogicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EqualityExpression ::= PropertyCallExpression EqualityOperator NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EqualityExpression ::= PropertyCallExpression EqualityOperator EqualityExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EqualityExpression ::= NumberExpression EqualityOperator NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EqualityExpression ::= STRING EqualityOperator STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NumberExpression ::= Number MultiplyOperator NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumberExpression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NumberExpression ::= Number AddOperator NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumberExpression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NumberExpression ::= Number 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumberExpression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LogicalExpression ::= PropertyCallExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LogicalExpression ::= BoolValue 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LogicalExpression ::= NOT OCLExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LogicalExpression ::= LogicalExpression LogicalOperator LogicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OCLExpression ::= CollectionExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLExpression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OCLExpression ::= ConditionalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLExpression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OCLExpression ::= EqualityExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLExpression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OCLExpression ::= NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLExpression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OCLExpression ::= LogicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLExpression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OCLExpression ::= LPAREN OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLExpression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Stereotype ::= INV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stereotype",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Stereotype ::= POS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stereotype",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Stereotype ::= PRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stereotype",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FormalParameter ::= PropertyCall 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameter",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FormalParameter ::= ID DOISPONTOS SimpleTypeSpecifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameter",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FormalParameters ::= FormalParameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FormalParameters ::= FormalParameters VIRGULA FormalParameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OperationName ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperationName",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ClassifierContext ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassifierContext",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ClassifierContext ::= ID DOISPONTOS ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassifierContext",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OperationContext ::= ID QUATROPONTOS OperationName LPAREN FormalParameters RPAREN DOISPONTOS SimpleTypeSpecifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperationContext",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OperationContext ::= ID QUATROPONTOS OperationName LPAREN FormalParameters RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperationContext",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OperationContext ::= ID QUATROPONTOS OperationName LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperationContext",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PreExpression ::= PRE ID DOISPONTOS OCLExpression POS ID DOISPONTOS OCLExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PreExpression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PreExpression ::= PRE DOISPONTOS OCLExpression POS DOISPONTOS OCLExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PreExpression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PreExpression ::= PRE ID DOISPONTOS OCLExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PreExpression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PreExpression ::= PRE DOISPONTOS OCLExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PreExpression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // InvExpression ::= INV ID DOISPONTOS OCLExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InvExpression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // InvExpression ::= INV DOISPONTOS OCLExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InvExpression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ContextBody ::= PreExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContextBody",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ContextBody ::= InvExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContextBody",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ContextDeclaration ::= CONTEXT ClassifierContext 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContextDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ContextDeclaration ::= CONTEXT OperationContext 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContextDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Constraint ::= ContextDeclaration ContextBody 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constraint",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // OCLConstraints ::= Constraint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLConstraints",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // OCLConstraints ::= Constraint OCLConstraints 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLConstraints",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= OCLConstraints EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

