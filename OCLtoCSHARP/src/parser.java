
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 23 13:44:24 GMT-03:00 2010
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 23 13:44:24 GMT-03:00 2010
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\165\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\004\004\000\002\004\004" +
    "\000\002\005\005\000\002\005\006\000\002\010\007\000" +
    "\002\010\010\000\002\010\012\000\002\011\005\000\002" +
    "\011\003\000\002\012\003\000\002\013\005\000\002\013" +
    "\003\000\002\015\005\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\026\005\000\002\026\005\000\002\026\004\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\003" +
    "\000\002\026\003\000\002\027\003\000\002\027\005\000" +
    "\002\027\005\000\002\030\005\000\002\031\006\000\002" +
    "\031\005\000\002\031\003\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\043\003\000\002\043\003\000\002\045\005\000\002" +
    "\044\011\000\002\047\005\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\052\006\000\002\052\010\000" +
    "\002\053\012\000\002\053\010\000\002\053\005\000\002" +
    "\054\006\000\002\055\006\000\002\056\012\000\002\056" +
    "\010\000\002\056\005\000\002\057\005\000\002\057\007" +
    "\000\002\057\007\000\002\060\003\000\002\060\005\000" +
    "\002\016\003\000\002\016\003\000\002\017\006\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\022\003" +
    "\000\002\022\005\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\025\003\000\002\025\003\000\002" +
    "\024\003\000\002\024\003\000\002\050\006\000\002\050" +
    "\005\000\002\046\003\000\002\046\005\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\034\003\000\002\034\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\041\003" +
    "\000\002\041\003\000\002\033\003\000\002\033\003\000" +
    "\002\037\003\000\002\037\003\000\002\035\003\000\002" +
    "\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\004\024\007\001\002\000\004\002\303\001" +
    "\002\000\006\002\uffff\024\007\001\002\000\010\004\045" +
    "\005\046\006\047\001\002\000\004\056\010\001\002\000" +
    "\014\004\ufff5\005\ufff5\006\ufff5\033\014\034\013\001\002" +
    "\000\010\004\ufffc\005\ufffc\006\ufffc\001\002\000\010\004" +
    "\ufffd\005\ufffd\006\ufffd\001\002\000\004\056\016\001\002" +
    "\000\004\056\015\001\002\000\010\004\ufff6\005\ufff6\006" +
    "\ufff6\001\002\000\004\025\ufff4\001\002\000\004\025\020" +
    "\001\002\000\006\026\022\056\021\001\002\000\004\033" +
    "\043\001\002\000\010\004\ufff9\005\ufff9\006\ufff9\001\002" +
    "\000\006\026\ufff2\035\ufff2\001\002\000\006\026\025\035" +
    "\026\001\002\000\012\004\ufff8\005\ufff8\006\ufff8\033\030" +
    "\001\002\000\004\056\021\001\002\000\006\026\ufff3\035" +
    "\ufff3\001\002\000\016\056\031\057\032\070\040\072\037" +
    "\100\035\101\034\001\002\000\064\002\uffae\004\uffae\005" +
    "\uffae\006\uffae\013\uffae\014\uffae\015\uffae\024\uffae\025\uffae" +
    "\026\uffae\033\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041" +
    "\uffae\042\uffae\043\uffae\044\uffae\046\041\051\uffae\073\uffae" +
    "\074\uffae\075\uffae\077\uffae\001\002\000\016\004\uffb0\005" +
    "\uffb0\006\uffb0\026\uffb0\035\uffb0\051\uffb0\001\002\000\010" +
    "\004\ufff7\005\ufff7\006\ufff7\001\002\000\016\004\uffb2\005" +
    "\uffb2\006\uffb2\026\uffb2\035\uffb2\051\uffb2\001\002\000\016" +
    "\004\uffb3\005\uffb3\006\uffb3\026\uffb3\035\uffb3\051\uffb3\001" +
    "\002\000\016\004\uffb4\005\uffb4\006\uffb4\026\uffb4\035\uffb4" +
    "\051\uffb4\001\002\000\016\004\uffaf\005\uffaf\006\uffaf\026" +
    "\uffaf\035\uffaf\051\uffaf\001\002\000\016\004\uffb1\005\uffb1" +
    "\006\uffb1\026\uffb1\035\uffb1\051\uffb1\001\002\000\004\056" +
    "\031\001\002\000\062\002\uffad\004\uffad\005\uffad\006\uffad" +
    "\013\uffad\014\uffad\015\uffad\024\uffad\025\uffad\026\uffad\033" +
    "\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad" +
    "\043\uffad\044\uffad\051\uffad\073\uffad\074\uffad\075\uffad\077" +
    "\uffad\001\002\000\016\056\031\057\032\070\040\072\037" +
    "\100\035\101\034\001\002\000\006\026\ufff1\035\ufff1\001" +
    "\002\000\006\033\ufff0\056\ufff0\001\002\000\006\033\uffef" +
    "\056\uffef\001\002\000\006\033\uffee\056\uffee\001\002\000" +
    "\006\033\053\056\052\001\002\000\006\002\ufffe\024\ufffe" +
    "\001\002\000\004\033\300\001\002\000\024\012\062\025" +
    "\063\056\031\057\064\061\061\062\072\067\075\071\077" +
    "\076\056\001\002\000\024\036\140\037\136\040\137\041" +
    "\141\042\135\043\142\073\221\074\223\075\224\001\002" +
    "\000\026\002\uffed\013\uffed\014\uffed\015\263\024\uffed\026" +
    "\uffed\073\221\074\223\075\224\077\uffed\001\002\000\024" +
    "\012\062\025\063\056\031\057\064\061\061\062\072\067" +
    "\075\071\077\076\056\001\002\000\026\002\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\024\uffd0\026\uffd0\073\uffd0\074\uffd0\075" +
    "\uffd0\077\uffd0\001\002\000\026\002\uffd1\013\uffd1\014\uffd1" +
    "\015\uffd1\024\uffd1\026\uffd1\073\uffd1\074\uffd1\075\uffd1\077" +
    "\uffd1\001\002\000\026\002\uffa7\013\uffa7\014\uffa7\015\uffa7" +
    "\024\uffa7\026\uffa7\073\uffa7\074\uffa7\075\uffa7\077\uffa7\001" +
    "\002\000\022\025\063\056\031\057\064\061\061\062\072" +
    "\067\075\071\077\076\056\001\002\000\022\025\063\056" +
    "\031\057\064\061\061\062\072\067\075\071\077\076\056" +
    "\001\002\000\006\036\140\037\136\001\002\000\026\002" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\024\uffe9\026\uffe9\073\uffe9" +
    "\074\uffe9\075\uffe9\077\uffe9\001\002\000\032\002\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\024\uffeb\026\uffeb\036\140\037\136" +
    "\073\uffeb\074\uffeb\075\uffeb\077\uffeb\001\002\000\026\002" +
    "\uffea\013\uffea\014\uffea\015\uffea\024\uffea\026\uffea\073\uffea" +
    "\074\uffea\075\uffea\077\uffea\001\002\000\006\002\ufffb\024" +
    "\ufffb\001\002\000\026\002\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\024\uffe2\026\uffe2\073\uffe2\074\uffe2\075\uffe2\077\uffe2\001" +
    "\002\000\026\002\uffa6\013\uffa6\014\uffa6\015\uffa6\024\uffa6" +
    "\026\uffa6\073\uffa6\074\uffa6\075\uffa6\077\uffa6\001\002\000" +
    "\026\002\uffe1\013\uffe1\014\uffe1\015\uffe1\024\uffe1\026\uffe1" +
    "\073\uffe1\074\uffe1\075\uffe1\077\uffe1\001\002\000\042\002" +
    "\uffec\013\uffec\014\uffec\015\uffec\024\uffec\026\uffec\036\140" +
    "\037\136\040\137\041\141\042\135\043\142\073\uffec\074" +
    "\uffec\075\uffec\077\uffec\001\002\000\052\002\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\024\uffa9\026\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\041\uffa9\042\uffa9\043\uffa9\052\uffa9\053\uffa9\054\uffa9" +
    "\055\uffa9\073\uffa9\074\uffa9\075\uffa9\077\uffa9\001\002\000" +
    "\030\025\112\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda" +
    "\043\uffda\044\111\073\uffda\074\uffda\075\uffda\001\002\000" +
    "\052\002\uffa8\013\uffa8\014\uffa8\015\uffa8\024\uffa8\026\uffa8" +
    "\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\052" +
    "\uffa8\053\uffa8\054\uffa8\055\uffa8\073\uffa8\074\uffa8\075\uffa8" +
    "\077\uffa8\001\002\000\052\002\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\024\uffe0\026\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\043\uffe0\052\101\053\105\054\103\055\102\073" +
    "\uffe0\074\uffe0\075\uffe0\077\uffe0\001\002\000\006\067\uff94" +
    "\071\uff94\001\002\000\006\067\uff91\071\uff91\001\002\000" +
    "\006\067\uff92\071\uff92\001\002\000\006\067\075\071\077" +
    "\001\002\000\006\067\uff93\071\uff93\001\002\000\006\067" +
    "\075\071\077\001\002\000\042\002\uffde\013\uffde\014\uffde" +
    "\015\uffde\024\uffde\026\uffde\036\uffde\037\uffde\040\uffde\041" +
    "\uffde\042\uffde\043\uffde\073\uffde\074\uffde\075\uffde\077\uffde" +
    "\001\002\000\042\002\uffdf\013\uffdf\014\uffdf\015\uffdf\024" +
    "\uffdf\026\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf" +
    "\043\uffdf\073\uffdf\074\uffdf\075\uffdf\077\uffdf\001\002\000" +
    "\016\007\126\010\123\011\122\016\125\017\121\023\132" +
    "\001\002\000\006\026\113\056\021\001\002\000\042\002" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\024\uffdb\026\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\073\uffdb\074" +
    "\uffdb\075\uffdb\077\uffdb\001\002\000\006\026\115\035\026" +
    "\001\002\000\042\002\uffdc\013\uffdc\014\uffdc\015\uffdc\024" +
    "\uffdc\026\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\073\uffdc\074\uffdc\075\uffdc\077\uffdc\001\002\000" +
    "\026\002\uffca\013\uffca\014\uffca\015\uffca\024\uffca\026\uffca" +
    "\073\uffca\074\uffca\075\uffca\077\uffca\001\002\000\026\002" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\024\uffcc\026\uffcc\073\uffcc" +
    "\074\uffcc\075\uffcc\077\uffcc\001\002\000\026\002\uffc9\013" +
    "\uffc9\014\uffc9\015\uffc9\024\uffc9\026\uffc9\073\uffc9\074\uffc9" +
    "\075\uffc9\077\uffc9\001\002\000\004\025\247\001\002\000" +
    "\024\012\062\025\233\056\031\057\064\061\061\062\072" +
    "\067\075\071\077\076\056\001\002\000\024\012\062\025" +
    "\161\056\031\057\064\061\061\062\072\067\075\071\077" +
    "\076\056\001\002\000\026\002\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\024\uffc8\026\uffc8\073\uffc8\074\uffc8\075\uffc8\077\uffc8" +
    "\001\002\000\004\025\156\001\002\000\004\025\147\001" +
    "\002\000\026\002\uffcb\013\uffcb\014\uffcb\015\uffcb\024\uffcb" +
    "\026\uffcb\073\uffcb\074\uffcb\075\uffcb\077\uffcb\001\002\000" +
    "\026\002\uffcd\013\uffcd\014\uffcd\015\uffcd\024\uffcd\026\uffcd" +
    "\073\uffcd\074\uffcd\075\uffcd\077\uffcd\001\002\000\026\002" +
    "\uffc7\013\uffc7\014\uffc7\015\uffc7\024\uffc7\026\uffc7\073\uffc7" +
    "\074\uffc7\075\uffc7\077\uffc7\001\002\000\004\025\133\001" +
    "\002\000\004\026\134\001\002\000\042\002\uffbc\013\uffbc" +
    "\014\uffbc\015\uffbc\024\uffbc\026\uffbc\036\140\037\136\040" +
    "\137\041\141\042\135\043\142\073\uffbc\074\uffbc\075\uffbc" +
    "\077\uffbc\001\002\000\010\056\uff95\067\uff95\071\uff95\001" +
    "\002\000\022\025\uff99\056\uff99\057\uff99\061\uff99\062\uff99" +
    "\067\uff99\071\uff99\076\uff99\001\002\000\010\056\uff96\067" +
    "\uff96\071\uff96\001\002\000\022\025\uff9a\056\uff9a\057\uff9a" +
    "\061\uff9a\062\uff9a\067\uff9a\071\uff9a\076\uff9a\001\002\000" +
    "\010\056\uff98\067\uff98\071\uff98\001\002\000\010\056\uff97" +
    "\067\uff97\071\uff97\001\002\000\006\067\075\071\077\001" +
    "\002\000\006\067\075\071\077\001\002\000\026\002\uffba" +
    "\013\uffba\014\uffba\015\uffba\024\uffba\026\uffba\073\uffba\074" +
    "\uffba\075\uffba\077\uffba\001\002\000\026\002\uffbb\013\uffbb" +
    "\014\uffbb\015\uffbb\024\uffbb\026\uffbb\073\uffbb\074\uffbb\075" +
    "\uffbb\077\uffbb\001\002\000\024\012\062\025\063\056\031" +
    "\057\064\061\061\062\072\067\075\071\077\076\056\001" +
    "\002\000\004\026\155\001\002\000\032\025\112\036\uffda" +
    "\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\111\051" +
    "\152\073\uffda\074\uffda\075\uffda\001\002\000\024\012\062" +
    "\025\063\056\031\057\064\061\061\062\072\067\075\071" +
    "\077\076\056\001\002\000\004\026\154\001\002\000\026" +
    "\002\uffc5\013\uffc5\014\uffc5\015\uffc5\024\uffc5\026\uffc5\073" +
    "\uffc5\074\uffc5\075\uffc5\077\uffc5\001\002\000\026\002\uffc6" +
    "\013\uffc6\014\uffc6\015\uffc6\024\uffc6\026\uffc6\073\uffc6\074" +
    "\uffc6\075\uffc6\077\uffc6\001\002\000\004\056\157\001\002" +
    "\000\004\026\160\001\002\000\026\002\uffc1\013\uffc1\014" +
    "\uffc1\015\uffc1\024\uffc1\026\uffc1\073\uffc1\074\uffc1\075\uffc1" +
    "\077\uffc1\001\002\000\022\025\063\056\031\057\064\061" +
    "\061\062\072\067\075\071\077\076\056\001\002\000\004" +
    "\026\163\001\002\000\026\002\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\024\uffc2\026\uffc2\073\uffc2\074\uffc2\075\uffc2\077\uffc2" +
    "\001\002\000\016\036\140\037\136\040\137\041\141\042" +
    "\135\043\142\001\002\000\012\026\220\073\221\074\223" +
    "\075\224\001\002\000\034\025\112\033\uffb9\035\215\036" +
    "\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\051\uffb9" +
    "\073\uffda\074\uffda\075\uffda\001\002\000\006\036\140\037" +
    "\136\001\002\000\006\033\172\051\171\001\002\000\024" +
    "\012\062\025\063\056\031\057\064\061\061\062\072\067" +
    "\075\071\077\076\056\001\002\000\026\056\031\057\032" +
    "\063\175\064\177\065\176\066\200\070\040\072\037\100" +
    "\035\101\034\001\002\000\004\051\206\001\002\000\004" +
    "\025\203\001\002\000\004\025\uff9e\001\002\000\004\025" +
    "\uff9c\001\002\000\004\025\uff9d\001\002\000\004\025\uff9b" +
    "\001\002\000\004\051\uffb7\001\002\000\004\051\uffb6\001" +
    "\002\000\016\056\031\057\032\070\040\072\037\100\035" +
    "\101\034\001\002\000\004\026\205\001\002\000\004\051" +
    "\uffb5\001\002\000\024\012\062\025\063\056\031\057\064" +
    "\061\061\062\072\067\075\071\077\076\056\001\002\000" +
    "\004\026\210\001\002\000\026\002\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\024\uffc4\026\uffc4\073\uffc4\074\uffc4\075\uffc4\077" +
    "\uffc4\001\002\000\004\026\212\001\002\000\026\002\uffc3" +
    "\013\uffc3\014\uffc3\015\uffc3\024\uffc3\026\uffc3\073\uffc3\074" +
    "\uffc3\075\uffc3\077\uffc3\001\002\000\004\057\064\001\002" +
    "\000\026\002\uffe3\013\uffe3\014\uffe3\015\uffe3\024\uffe3\026" +
    "\uffe3\073\uffe3\074\uffe3\075\uffe3\077\uffe3\001\002\000\004" +
    "\056\031\001\002\000\006\033\uffb8\051\uffb8\001\002\000" +
    "\010\033\uffb9\035\215\051\uffb9\001\002\000\026\002\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\024\uffe8\026\uffe8\073\uffe8\074" +
    "\uffe8\075\uffe8\077\uffe8\001\002\000\022\025\uffa1\056\uffa1" +
    "\057\uffa1\061\uffa1\062\uffa1\067\uffa1\071\uffa1\076\uffa1\001" +
    "\002\000\022\025\063\056\031\057\064\061\061\062\072" +
    "\067\075\071\077\076\056\001\002\000\022\025\uffa0\056" +
    "\uffa0\057\uffa0\061\uffa0\062\uffa0\067\uffa0\071\uffa0\076\uffa0" +
    "\001\002\000\022\025\uff9f\056\uff9f\057\uff9f\061\uff9f\062" +
    "\uff9f\067\uff9f\071\uff9f\076\uff9f\001\002\000\026\002\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\024\uffe7\026\uffe7\073\221\074" +
    "\223\075\224\077\uffe7\001\002\000\044\002\uffda\013\uffda" +
    "\014\uffda\015\uffda\024\uffda\025\112\026\uffda\036\uffda\037" +
    "\uffda\040\uffda\041\uffda\042\uffda\043\uffda\073\uffda\074\uffda" +
    "\075\uffda\077\uffda\001\002\000\006\067\075\071\077\001" +
    "\002\000\006\067\075\071\077\001\002\000\026\002\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\024\uffe4\026\uffe4\073\uffe4\074" +
    "\uffe4\075\uffe4\077\uffe4\001\002\000\026\002\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\024\uffe5\026\uffe5\073\uffe5\074\uffe5\075" +
    "\uffe5\077\uffe5\001\002\000\022\025\063\056\031\057\064" +
    "\061\061\062\072\067\075\071\077\076\056\001\002\000" +
    "\004\026\235\001\002\000\026\002\uffbd\013\uffbd\014\uffbd" +
    "\015\uffbd\024\uffbd\026\uffbd\073\uffbd\074\uffbd\075\uffbd\077" +
    "\uffbd\001\002\000\006\033\240\051\237\001\002\000\024" +
    "\012\062\025\063\056\031\057\064\061\061\062\072\067" +
    "\075\071\077\076\056\001\002\000\026\056\031\057\032" +
    "\063\175\064\177\065\176\066\200\070\040\072\037\100" +
    "\035\101\034\001\002\000\004\051\242\001\002\000\024" +
    "\012\062\025\063\056\031\057\064\061\061\062\072\067" +
    "\075\071\077\076\056\001\002\000\004\026\244\001\002" +
    "\000\026\002\uffbf\013\uffbf\014\uffbf\015\uffbf\024\uffbf\026" +
    "\uffbf\073\uffbf\074\uffbf\075\uffbf\077\uffbf\001\002\000\004" +
    "\026\246\001\002\000\026\002\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\024\uffbe\026\uffbe\073\uffbe\074\uffbe\075\uffbe\077\uffbe" +
    "\001\002\000\004\056\250\001\002\000\004\026\251\001" +
    "\002\000\026\002\uffc0\013\uffc0\014\uffc0\015\uffc0\024\uffc0" +
    "\026\uffc0\073\uffc0\074\uffc0\075\uffc0\077\uffc0\001\002\000" +
    "\004\057\253\001\002\000\032\002\uffdd\013\uffdd\014\uffdd" +
    "\015\uffdd\024\uffdd\026\uffdd\036\uffdd\037\uffdd\073\uffdd\074" +
    "\uffdd\075\uffdd\077\uffdd\001\002\000\012\013\255\073\221" +
    "\074\223\075\224\001\002\000\022\025\063\056\031\057" +
    "\064\061\061\062\072\067\075\071\077\076\056\001\002" +
    "\000\012\014\257\073\221\074\223\075\224\001\002\000" +
    "\022\025\063\056\031\057\064\061\061\062\072\067\075" +
    "\071\077\076\056\001\002\000\012\073\221\074\223\075" +
    "\224\077\261\001\002\000\026\002\uffce\013\uffce\014\uffce" +
    "\015\uffce\024\uffce\026\uffce\073\uffce\074\uffce\075\uffce\077" +
    "\uffce\001\002\000\026\002\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\024\uffe6\026\uffe6\073\uffe6\074\uffe6\075\uffe6\077\uffe6\001" +
    "\002\000\022\025\063\056\031\057\064\061\061\062\072" +
    "\067\075\071\077\076\056\001\002\000\026\002\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\024\uffcf\026\uffcf\073\221\074\223" +
    "\075\224\077\uffcf\001\002\000\022\025\063\056\031\057" +
    "\064\061\061\062\072\067\075\071\077\076\056\001\002" +
    "\000\022\025\063\056\031\057\064\061\061\062\072\067" +
    "\075\071\077\076\056\001\002\000\010\056\031\067\075" +
    "\071\077\001\002\000\026\002\uffd4\013\uffd4\014\uffd4\015" +
    "\uffd4\024\uffd4\026\uffd4\073\uffd4\074\uffd4\075\uffd4\077\uffd4" +
    "\001\002\000\026\002\uffd8\013\uffd8\014\uffd8\015\uffd8\024" +
    "\uffd8\026\uffd8\073\uffd8\074\uffd8\075\uffd8\077\uffd8\001\002" +
    "\000\042\002\uffd7\013\uffd7\014\uffd7\015\uffd7\024\uffd7\026" +
    "\uffd7\036\140\037\136\040\137\041\141\042\135\043\142" +
    "\073\221\074\223\075\224\077\uffd7\001\002\000\042\002" +
    "\uffd3\013\uffd3\014\uffd3\015\uffd3\024\uffd3\026\uffd3\036\140" +
    "\037\136\040\137\041\141\042\135\043\142\073\uffd3\074" +
    "\uffd3\075\uffd3\077\uffd3\001\002\000\026\002\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\024\uffd5\026\uffd5\073\221\074\223\075" +
    "\224\077\uffd5\001\002\000\032\002\uffd2\013\uffd2\014\uffd2" +
    "\015\uffd2\024\uffd2\026\uffd2\036\140\037\136\073\uffd2\074" +
    "\uffd2\075\uffd2\077\uffd2\001\002\000\042\002\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\024\uffd9\026\uffd9\036\140\037\136\040" +
    "\137\041\141\042\135\043\142\073\221\074\223\075\224" +
    "\077\uffd9\001\002\000\026\002\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\024\uffd6\026\uffd6\073\221\074\223\075\224\077\uffd6" +
    "\001\002\000\024\012\062\025\063\056\031\057\064\061" +
    "\061\062\072\067\075\071\077\076\056\001\002\000\006" +
    "\002\ufffa\024\ufffa\001\002\000\004\002\000\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\010\002\003\003\004\004\005\001\001\000" +
    "\002\001\001\000\010\002\301\003\004\004\005\001\001" +
    "\000\006\005\050\006\047\001\001\000\006\010\011\011" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\023\015\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\026\001\001\000\002\001\001\000\006\021" +
    "\032\022\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\041\001\001\000\002\001\001\000\006\021\043\022" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\007\067\022\075\024\070" +
    "\025\077\026\054\027\073\030\065\031\053\032\072\043" +
    "\066\044\056\045\057\047\064\001\001\000\010\034\265" +
    "\036\266\042\264\001\001\000\004\042\221\001\001\000" +
    "\034\007\261\022\075\024\070\025\077\026\054\027\073" +
    "\030\065\031\053\032\072\043\066\044\056\045\057\047" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\022\225\024\070\025\077\026\253\027" +
    "\163\030\166\031\053\032\072\001\001\000\022\022\225" +
    "\024\070\025\077\026\164\027\163\030\166\031\053\032" +
    "\072\001\001\000\004\034\251\001\001\000\002\001\001" +
    "\000\004\034\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\227\036\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\105\041\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\077\027\107\001\001\000\002\001\001" +
    "\000\006\025\077\027\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\051\127\052\116\053\126\054\115" +
    "\055\117\056\123\057\130\001\001\000\006\013\113\015" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\007\233\022\075\024\070" +
    "\025\077\026\054\027\073\030\065\031\053\032\072\043" +
    "\066\044\056\045\057\047\064\001\001\000\034\007\161" +
    "\022\075\024\070\025\077\026\054\027\073\030\065\031" +
    "\053\032\072\043\066\044\056\045\057\047\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\143\036\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\077\027\145\001\001\000\006\025\077\027\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\007" +
    "\147\022\150\024\070\025\077\026\054\027\073\030\065" +
    "\031\053\032\072\043\066\044\056\045\057\047\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\007\152" +
    "\022\075\024\070\025\077\026\054\027\073\030\065\031" +
    "\053\032\072\043\066\044\056\045\057\047\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\022\165\024\070\025\077\026\164\027\163\030\166\031" +
    "\053\032\072\060\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\227\036\226\001\001\000\004\042" +
    "\221\001\001\000\002\001\001\000\004\034\212\001\001" +
    "\000\002\001\001\000\034\007\210\022\075\024\070\025" +
    "\077\026\054\027\073\030\065\031\053\032\072\043\066" +
    "\044\056\045\057\047\064\001\001\000\014\016\172\017" +
    "\200\020\173\021\201\022\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\203\022\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\007\206\022\075\024\070" +
    "\025\077\026\054\027\073\030\065\031\053\032\072\043" +
    "\066\044\056\045\057\047\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\213\001\001\000\002\001\001\000\006\022\216" +
    "\060\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\022\225\024\070" +
    "\025\077\026\224\027\163\030\166\031\053\032\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\221" +
    "\001\001\000\002\001\001\000\006\025\077\027\231\001" +
    "\001\000\006\025\077\027\230\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\022\165\024\070\025\077\026" +
    "\164\027\163\030\166\031\053\032\072\060\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\007\244\022\075\024\070\025\077\026\054\027\073" +
    "\030\065\031\053\032\072\043\066\044\056\045\057\047" +
    "\064\001\001\000\014\016\240\017\200\020\173\021\201" +
    "\022\035\001\001\000\002\001\001\000\034\007\242\022" +
    "\075\024\070\025\077\026\054\027\073\030\065\031\053" +
    "\032\072\043\066\044\056\045\057\047\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\221" +
    "\001\001\000\022\022\225\024\070\025\077\026\255\027" +
    "\163\030\166\031\053\032\072\001\001\000\004\042\221" +
    "\001\001\000\022\022\225\024\070\025\077\026\257\027" +
    "\163\030\166\031\053\032\072\001\001\000\004\042\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\022" +
    "\225\024\070\025\077\026\263\027\163\030\166\031\053" +
    "\032\072\001\001\000\004\042\221\001\001\000\022\022" +
    "\225\024\070\025\077\026\276\027\163\030\166\031\275" +
    "\032\072\001\001\000\022\022\225\024\070\025\077\026" +
    "\273\027\272\030\274\031\271\032\072\001\001\000\012" +
    "\022\225\025\077\027\267\031\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\034\265\036\266\042\264" +
    "\001\001\000\006\034\227\036\226\001\001\000\004\042" +
    "\221\001\001\000\004\034\212\001\001\000\010\034\265" +
    "\036\266\042\264\001\001\000\004\042\221\001\001\000" +
    "\034\007\300\022\075\024\070\025\077\026\054\027\073" +
    "\030\065\031\053\032\072\043\066\044\056\045\057\047" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PostfixOperator ::= SETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PostfixOperator",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PostfixOperator ::= PONTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PostfixOperator",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // UnaryOperator ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryOperator",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // UnaryOperator ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryOperator",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // MultiplyOperator ::= DIVIDIR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplyOperator",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // MultiplyOperator ::= VEZES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplyOperator",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // AddOperator ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AddOperator",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // AddOperator ::= MAIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AddOperator",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // RelationalOperator ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // RelationalOperator ::= MENORQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // RelationalOperator ::= MAIORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // RelationalOperator ::= MAIORQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelationalOperator",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EqualityOperator ::= DIFF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EqualityOperator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EqualityOperator ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EqualityOperator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CollectionKind ::= COLLECTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionKind",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CollectionKind ::= SEQUENCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionKind",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CollectionKind ::= BAG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionKind",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CollectionKind ::= SET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionKind",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LogicalOperator ::= XOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalOperator",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LogicalOperator ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalOperator",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LogicalOperator ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalOperator",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CollectionItems ::= OCLExpression VIRGULA CollectionItems 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionItems",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CollectionItems ::= OCLExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionItems",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LiteralCollection ::= CollectionKind LCHAVE RCHAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LiteralCollection",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LiteralCollection ::= CollectionKind LCHAVE CollectionItems RCHAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LiteralCollection",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // BoolValue ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolValue",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // BoolValue ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolValue",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Number ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Number",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Number ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Number",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OCLLiteral ::= BoolValue 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLLiteral",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OCLLiteral ::= Number 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLLiteral",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OCLLiteral ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLLiteral",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PathName ::= ID PONTO PathName 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PathName",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PathName ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PathName",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SimpleTypeSpecifier ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeSpecifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SimpleTypeSpecifier ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeSpecifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SimpleTypeSpecifier ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeSpecifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SimpleTypeSpecifier ::= REALTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeSpecifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SimpleTypeSpecifier ::= INTTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeSpecifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SimpleTypeSpecifier ::= PathName 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleTypeSpecifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CollectionType ::= CollectionKind LPAREN SimpleTypeSpecifier RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionType",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TypeSpecifier ::= SimpleTypeSpecifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TypeSpecifier ::= CollectionType 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CollectionParameters ::= PathName VIRGULA CollectionParameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionParameters",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CollectionParameters ::= PathName 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionParameters",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SizeOperation ::= SIZE LPAREN RPAREN EqualityOperator NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SizeOperation",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SizeOperation ::= SIZE LPAREN RPAREN RelationalOperator NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SizeOperation",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SizeOperation ::= SIZE LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SizeOperation",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ForAllOperation ::= FORALL OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForAllOperation",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ForAllOperation ::= FORALL LPAREN CollectionParameters BARRA OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForAllOperation",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ForAllOperation ::= FORALL LPAREN CollectionParameters DOISPONTOS TypeSpecifier BARRA OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForAllOperation",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExcludingOperation ::= EXCLUDING LPAREN ID RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExcludingOperation",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IncludingOperation ::= INCLUDING LPAREN ID RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IncludingOperation",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ExistsOperation ::= EXISTS OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExistsOperation",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ExistsOperation ::= EXISTS LPAREN CollectionParameters BARRA OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExistsOperation",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExistsOperation ::= EXISTS LPAREN CollectionParameters DOISPONTOS TypeSpecifier BARRA OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExistsOperation",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SelectOperation ::= SELECT LPAREN PathName BARRA OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SelectOperation",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SelectOperation ::= SELECT LPAREN OCLExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SelectOperation",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CollectionOperations ::= SizeOperation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionOperations",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CollectionOperations ::= ForAllOperation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionOperations",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CollectionOperations ::= ExcludingOperation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionOperations",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CollectionOperations ::= IncludingOperation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionOperations",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CollectionOperations ::= ExistsOperation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionOperations",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CollectionOperations ::= SelectOperation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionOperations",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CollectionExpression ::= PathName SETA CollectionOperations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CollectionExpression",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IfExpression ::= IF LogicalExpression THEN LogicalExpression ELSE LogicalExpression ENDIF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfExpression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ImpliesExpression ::= LogicalExpression IMPLIES LogicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImpliesExpression",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ConditionalExpression ::= IfExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionalExpression",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ConditionalExpression ::= ImpliesExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionalExpression",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PropertyCallExpression ::= PropertyCall EqualityOperator StringExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PropertyCallExpression ::= PropertyCall EqualityOperator NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PropertyCallExpression ::= PropertyCall RelationalOperator NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PropertyCallExpression ::= PropertyCall EqualityOperator LogicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PropertyCallExpression ::= PropertyCall LogicalOperator LogicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PropertyCallExpression ::= PropertyCall EqualityOperator PropertyCall 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PropertyCallExpression ::= PropertyCall RelationalOperator PropertyCall 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PropertyCallExpression ::= PropertyCall LogicalOperator PropertyCall 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCallExpression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PropertyCall ::= PathName 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCall",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PropertyCall ::= PathName LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCall",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PropertyCall ::= PathName LPAREN FormalParameters RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyCall",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // StringExpression ::= STRING EqualityOperator STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StringExpression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NumberExpression ::= Number MultiplyOperator NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumberExpression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NumberExpression ::= Number AddOperator NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumberExpression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NumberExpression ::= Number 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumberExpression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LogicalExpression ::= PropertyCallExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LogicalExpression ::= BoolValue 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LogicalExpression ::= StringExpression EqualityOperator StringExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LogicalExpression ::= NumberExpression EqualityOperator NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LogicalExpression ::= NumberExpression RelationalOperator NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LogicalExpression ::= NOT OCLExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LogicalExpression ::= LogicalExpression LogicalOperator LogicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LogicalExpression ::= LPAREN LogicalExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OCLExpression ::= CollectionExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLExpression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OCLExpression ::= ConditionalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLExpression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OCLExpression ::= StringExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLExpression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OCLExpression ::= NumberExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLExpression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OCLExpression ::= LogicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLExpression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Stereotype ::= INV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stereotype",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Stereotype ::= POS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stereotype",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Stereotype ::= PRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stereotype",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FormalParameter ::= ID DOISPONTOS SimpleTypeSpecifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameter",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FormalParameters ::= FormalParameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FormalParameters ::= FormalParameters VIRGULA FormalParameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OperationName ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperationName",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ClassifierContext ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassifierContext",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ClassifierContext ::= ID DOISPONTOS ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassifierContext",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OperationContext ::= ID QUATROPONTOS OperationName LPAREN FormalParameters RPAREN DOISPONTOS SimpleTypeSpecifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperationContext",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OperationContext ::= ID QUATROPONTOS OperationName LPAREN FormalParameters RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperationContext",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OperationContext ::= ID QUATROPONTOS OperationName LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperationContext",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ContextBody ::= Stereotype ID DOISPONTOS OCLExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContextBody",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ContextBody ::= Stereotype DOISPONTOS OCLExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContextBody",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ContextDeclaration ::= CONTEXT ClassifierContext 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContextDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ContextDeclaration ::= CONTEXT OperationContext 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ContextDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Constraint ::= ContextDeclaration ContextBody 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constraint",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // OCLConstraints ::= Constraint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLConstraints",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // OCLConstraints ::= Constraint OCLConstraints 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OCLConstraints",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= OCLConstraints EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

