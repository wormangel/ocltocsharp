import java_cup.runtime.*;


/* Terminais (tokens vindos do lexer) */
terminal            PRE, POS, INV, SELECT, EXISTS, FORALL, IF, THEN, ELSE, IMPLIES, INCLUDING, EXCLUDING, OCLISNEW, ATPRE, RESULT, SIZE, CONTEXT, LPAREN, RPAREN;
terminal			LCOLCH, RCOLCH, LCHAVE, RCHAVE, DOISPONTOS, QUATROPONTOS, VIRGULA, IGUAL, DIFF, MENORQ, MAIORQ, MENORIGUAL, MAIORIGUAL, SETA, PONTOPONTO;
terminal			PONTO, SHARP, PONTOVIRGULA, BARRA, MAIS, MENOS, VEZES, DIVIDIR, ID, STRING, NUMBER, TRUE, FALSE, SET, BAG, SEQUENCE, COLLECTION;
terminal			INTEGER, VOID, REAL, BOOLEAN, AND, OR, XOR, NOT, ENDIF;


/* Não terminais */
non terminal            OCLConstraints, Constraint, ContextDeclaration, ContextBody, Stereotype, OCLExpression, OperationContext, ClassifierContext;
non terminal			OperationName, FormalParameters,  ReturnType, TypeIdentifier, FormalParameter, TypeSpecifier, CollectionType, CollectionKind,SimpleTypeSpecifier, PathName, OCLLiteral;
//Expressions
non terminal 			LogicalExpression, RelationalExpression, AdditiveExpression, MultiplicativeExpression, UnaryExpression, PostFixExpression, PrimaryExpression, PropertyCall;
//Operators
non terminal			MultiplyOperator, EqualityOperator, PostfixOperator, RelationalOperator, UnaryOperator, MultOperator, AddOperator, LogicalOperator;
//Conditional Expressions
non terminal			ConditionalExpression, IfExpression, ImpliesExpression;
//Collections
non terminal			CollectionItems, CollectionExpression, LiteralCollection, CollectionOperations, SelectOperation, ExistsOperation, IncludingOperation, ExcludingOperation, ForAllOperation, SizeOperation, CollectionParameters;

/* Regras */
// Regra Inicial
start with OCLConstraints;
// Regras para constraints
OCLConstraints ::= Constraint OCLConstraints | Constraint;
Constraint ::= ContextDeclaration ContextBody;
ContextDeclaration ::= CONTEXT OperationContext 
				| CONTEXT ClassifierContext;
ContextBody ::= Stereotype DOISPONTOS OCLExpression;
OperationContext ::= ID QUATROPONTOS OperationName LPAREN FormalParameters RPAREN  
				| ID QUATROPONTOS OperationName LPAREN FormalParameters RPAREN DOISPONTOS ReturnType ;
ReturnType ::= TypeIdentifier;
ClassifierContext ::= ID DOISPONTOS ID 
				| ID;
OperationName ::= ID;
FormalParameters ::= FormalParameters VIRGULA FormalParameter
				|FormalParameter;				
FormalParameter ::= ID DOISPONTOS TypeIdentifier;
Stereotype ::= PRE| POS | INV;

// Expressões
OCLExpression ::= LogicalExpression;
LogicalExpression ::= RelationalExpression 
				| RelationalExpression LogicalOperator LogicalExpression;
RelationalExpression ::= AdditiveExpression
				| AdditiveExpression RelationalOperator RelationalExpression;
AdditiveExpression ::= MultiplicativeExpression
				| MultiplicativeExpression AddOperator AdditiveExpression;
MultiplicativeExpression ::= UnaryExpression
				| UnaryExpression MultOperator MultiplicativeExpression;
UnaryExpression	::=	UnaryOperator PostFixExpression
				|PrimaryExpression;
PrimaryExpression ::= LPAREN LogicalExpression RPAREN
				| CollectionExpression
				| ConditionalExpression;

//Expressões condicionais
ConditionalExpression ::= ImpliesExpression
				| IfExpression;
ImpliesExpression ::= LogicalExpression IMPLIES LogicalExpression;
IfExpression ::= IF LogicalExpression THEN  LogicalExpression  ELSE  LogicalExpression ENDIF;	

//Expressões em coleões				
CollectionExpression ::= PathName SETA CollectionOperations;
CollectionOperations ::= SelectOperation
				|ExistsOperation
				|IncludingOperation
				|ExcludingOperation
				|ForAllOperation
				|SizeOperation;
SelectOperation ::= SELECT LPAREN OCLExpression RPAREN
				| SELECT LPAREN PathName BARRA OCLExpression RPAREN;
ExistsOperation ::= EXISTS LPAREN CollectionParameters DOISPONTOS TypeSpecifier BARRA OCLExpression RPAREN
				| EXISTS LPAREN CollectionParameters BARRA OCLExpression RPAREN
				| EXISTS OCLExpression RPAREN;
IncludingOperation ::= INCLUDING LPAREN ID RPAREN;
ExcludingOperation ::= EXCLUDING LPAREN ID RPAREN;
ForAllOperation ::= FORALL LPAREN CollectionParameters DOISPONTOS TypeSpecifier BARRA OCLExpression RPAREN
				| FORALL LPAREN CollectionParameters BARRA OCLExpression RPAREN
				| FORALL OCLExpression RPAREN;
SizeOperation ::= SIZE LPAREN RPAREN;
CollectionParameters ::= PathName
				| PathName VIRGULA CollectionParameters;


//Tipos
TypeSpecifier ::= CollectionType 
				| SimpleTypeSpecifier ;
CollectionType ::= CollectionKind LPAREN SimpleTypeSpecifier RPAREN;
SimpleTypeSpecifier ::= PathName | INTEGER | VOID | STRING | REAL | BOOLEAN ;
PathName ::= ID | ID PONTO PathName ;
TypeIdentifier ::= ID;
OCLLiteral ::= STRING | REAL | INTEGER | TRUE | FALSE;
LiteralCollection ::= CollectionKind LCHAVE CollectionItems RCHAVE
				|  CollectionKind LCHAVE  RCHAVE;
CollectionItems ::= OCLExpression
				| OCLExpression VIRGULA CollectionItems;
//Operators
LogicalOperator ::= AND | OR | XOR;
CollectionKind ::= SET | BAG | SEQUENCE | COLLECTION;
EqualityOperator ::= IGUAL | DIFF;
RelationalOperator ::= MAIORQ | MAIORIGUAL | MENORQ | MENORIGUAL;
AddOperator ::= MAIS | MENOS;
MultiplyOperator ::= VEZES | DIVIDIR;
UnaryOperator ::= NOT | MENOS;
PostfixOperator ::= PONTO | SETA;